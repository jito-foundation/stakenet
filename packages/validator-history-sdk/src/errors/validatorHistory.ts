/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';

/** AccountFullySized: Account already reached proper size, no more allocations allowed */
export const VALIDATOR_HISTORY_ERROR__ACCOUNT_FULLY_SIZED = 0x1770; // 6000
/** InvalidEpochCredits: Invalid epoch credits, credits must exist and each value must be greater than previous credits */
export const VALIDATOR_HISTORY_ERROR__INVALID_EPOCH_CREDITS = 0x1771; // 6001
/** EpochOutOfRange: Epoch is out of range of history */
export const VALIDATOR_HISTORY_ERROR__EPOCH_OUT_OF_RANGE = 0x1772; // 6002
/** NotSigVerified: Gossip Signature Verification not performed */
export const VALIDATOR_HISTORY_ERROR__NOT_SIG_VERIFIED = 0x1773; // 6003
/** GossipDataInvalid: Gossip Data Invalid */
export const VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_INVALID = 0x1774; // 6004
/** UnsupportedIpFormat: Unsupported IP Format, only IpAddr::V4 is supported */
export const VALIDATOR_HISTORY_ERROR__UNSUPPORTED_IP_FORMAT = 0x1775; // 6005
/** NotEnoughVotingHistory: Not enough voting history to create account. Minimum 5 epochs required */
export const VALIDATOR_HISTORY_ERROR__NOT_ENOUGH_VOTING_HISTORY = 0x1776; // 6006
/** GossipDataTooOld: Gossip data too old. Data cannot be older than the last recorded timestamp for a field */
export const VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_TOO_OLD = 0x1777; // 6007
/** GossipDataInFuture: Gossip timestamp too far in the future */
export const VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_IN_FUTURE = 0x1778; // 6008
/** ArithmeticError: Arithmetic Error (overflow/underflow) */
export const VALIDATOR_HISTORY_ERROR__ARITHMETIC_ERROR = 0x1779; // 6009
/** SlotHistoryOutOfDate: Slot history sysvar is not containing expected slots */
export const VALIDATOR_HISTORY_ERROR__SLOT_HISTORY_OUT_OF_DATE = 0x177a; // 6010
/** EpochTooLarge: Epoch larger than 65535, cannot be stored */
export const VALIDATOR_HISTORY_ERROR__EPOCH_TOO_LARGE = 0x177b; // 6011
/** DuplicateEpoch: Inserting duplicate epoch */
export const VALIDATOR_HISTORY_ERROR__DUPLICATE_EPOCH = 0x177c; // 6012
/** NoReallocNeeded: Account already sized properly */
export const VALIDATOR_HISTORY_ERROR__NO_REALLOC_NEEDED = 0x177d; // 6013

export type ValidatorHistoryError =
  | typeof VALIDATOR_HISTORY_ERROR__ACCOUNT_FULLY_SIZED
  | typeof VALIDATOR_HISTORY_ERROR__ARITHMETIC_ERROR
  | typeof VALIDATOR_HISTORY_ERROR__DUPLICATE_EPOCH
  | typeof VALIDATOR_HISTORY_ERROR__EPOCH_OUT_OF_RANGE
  | typeof VALIDATOR_HISTORY_ERROR__EPOCH_TOO_LARGE
  | typeof VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_IN_FUTURE
  | typeof VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_INVALID
  | typeof VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_TOO_OLD
  | typeof VALIDATOR_HISTORY_ERROR__INVALID_EPOCH_CREDITS
  | typeof VALIDATOR_HISTORY_ERROR__NO_REALLOC_NEEDED
  | typeof VALIDATOR_HISTORY_ERROR__NOT_ENOUGH_VOTING_HISTORY
  | typeof VALIDATOR_HISTORY_ERROR__NOT_SIG_VERIFIED
  | typeof VALIDATOR_HISTORY_ERROR__SLOT_HISTORY_OUT_OF_DATE
  | typeof VALIDATOR_HISTORY_ERROR__UNSUPPORTED_IP_FORMAT;

let validatorHistoryErrorMessages:
  | Record<ValidatorHistoryError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  validatorHistoryErrorMessages = {
    [VALIDATOR_HISTORY_ERROR__ACCOUNT_FULLY_SIZED]: `Account already reached proper size, no more allocations allowed`,
    [VALIDATOR_HISTORY_ERROR__ARITHMETIC_ERROR]: `Arithmetic Error (overflow/underflow)`,
    [VALIDATOR_HISTORY_ERROR__DUPLICATE_EPOCH]: `Inserting duplicate epoch`,
    [VALIDATOR_HISTORY_ERROR__EPOCH_OUT_OF_RANGE]: `Epoch is out of range of history`,
    [VALIDATOR_HISTORY_ERROR__EPOCH_TOO_LARGE]: `Epoch larger than 65535, cannot be stored`,
    [VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_IN_FUTURE]: `Gossip timestamp too far in the future`,
    [VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_INVALID]: `Gossip Data Invalid`,
    [VALIDATOR_HISTORY_ERROR__GOSSIP_DATA_TOO_OLD]: `Gossip data too old. Data cannot be older than the last recorded timestamp for a field`,
    [VALIDATOR_HISTORY_ERROR__INVALID_EPOCH_CREDITS]: `Invalid epoch credits, credits must exist and each value must be greater than previous credits`,
    [VALIDATOR_HISTORY_ERROR__NO_REALLOC_NEEDED]: `Account already sized properly`,
    [VALIDATOR_HISTORY_ERROR__NOT_ENOUGH_VOTING_HISTORY]: `Not enough voting history to create account. Minimum 5 epochs required`,
    [VALIDATOR_HISTORY_ERROR__NOT_SIG_VERIFIED]: `Gossip Signature Verification not performed`,
    [VALIDATOR_HISTORY_ERROR__SLOT_HISTORY_OUT_OF_DATE]: `Slot history sysvar is not containing expected slots`,
    [VALIDATOR_HISTORY_ERROR__UNSUPPORTED_IP_FORMAT]: `Unsupported IP Format, only IpAddr::V4 is supported`,
  };
}

export function getValidatorHistoryErrorMessage(
  code: ValidatorHistoryError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      validatorHistoryErrorMessages as Record<ValidatorHistoryError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isValidatorHistoryError<
  TProgramErrorCode extends ValidatorHistoryError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VALIDATOR_HISTORY_PROGRAM_ADDRESS,
    code
  );
}
