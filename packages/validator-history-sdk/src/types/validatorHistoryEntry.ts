/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getClientVersionDecoder,
  getClientVersionEncoder,
  getMerkleRootUploadAuthorityDecoder,
  getMerkleRootUploadAuthorityEncoder,
  type ClientVersion,
  type ClientVersionArgs,
  type MerkleRootUploadAuthority,
  type MerkleRootUploadAuthorityArgs,
} from '.';

export type ValidatorHistoryEntry = {
  activatedStakeLamports: bigint;
  epoch: number;
  mevCommission: number;
  epochCredits: number;
  commission: number;
  clientType: number;
  version: ClientVersion;
  ip: ReadonlyUint8Array;
  /** The enum mapping of the Validator's Tip Distribution Account's merkle root upload authority */
  merkleRootUploadAuthority: MerkleRootUploadAuthority;
  isSuperminority: number;
  rank: number;
  voteAccountLastUpdateSlot: bigint;
  mevEarned: number;
  priorityFeeCommission: number;
  padding0: ReadonlyUint8Array;
  priorityFeeTips: bigint;
  totalPriorityFees: bigint;
  totalLeaderSlots: number;
  blocksProduced: number;
  blockDataUpdatedAtSlot: bigint;
  /** The enum mapping of the Validator's Tip Distribution Account's merkle root upload authority */
  priorityFeeMerkleRootUploadAuthority: MerkleRootUploadAuthority;
  padding1: ReadonlyUint8Array;
};

export type ValidatorHistoryEntryArgs = {
  activatedStakeLamports: number | bigint;
  epoch: number;
  mevCommission: number;
  epochCredits: number;
  commission: number;
  clientType: number;
  version: ClientVersionArgs;
  ip: ReadonlyUint8Array;
  /** The enum mapping of the Validator's Tip Distribution Account's merkle root upload authority */
  merkleRootUploadAuthority: MerkleRootUploadAuthorityArgs;
  isSuperminority: number;
  rank: number;
  voteAccountLastUpdateSlot: number | bigint;
  mevEarned: number;
  priorityFeeCommission: number;
  padding0: ReadonlyUint8Array;
  priorityFeeTips: number | bigint;
  totalPriorityFees: number | bigint;
  totalLeaderSlots: number;
  blocksProduced: number;
  blockDataUpdatedAtSlot: number | bigint;
  /** The enum mapping of the Validator's Tip Distribution Account's merkle root upload authority */
  priorityFeeMerkleRootUploadAuthority: MerkleRootUploadAuthorityArgs;
  padding1: ReadonlyUint8Array;
};

export function getValidatorHistoryEntryEncoder(): FixedSizeEncoder<ValidatorHistoryEntryArgs> {
  return getStructEncoder([
    ['activatedStakeLamports', getU64Encoder()],
    ['epoch', getU16Encoder()],
    ['mevCommission', getU16Encoder()],
    ['epochCredits', getU32Encoder()],
    ['commission', getU8Encoder()],
    ['clientType', getU8Encoder()],
    ['version', getClientVersionEncoder()],
    ['ip', fixEncoderSize(getBytesEncoder(), 4)],
    ['merkleRootUploadAuthority', getMerkleRootUploadAuthorityEncoder()],
    ['isSuperminority', getU8Encoder()],
    ['rank', getU32Encoder()],
    ['voteAccountLastUpdateSlot', getU64Encoder()],
    ['mevEarned', getU32Encoder()],
    ['priorityFeeCommission', getU16Encoder()],
    ['padding0', fixEncoderSize(getBytesEncoder(), 2)],
    ['priorityFeeTips', getU64Encoder()],
    ['totalPriorityFees', getU64Encoder()],
    ['totalLeaderSlots', getU32Encoder()],
    ['blocksProduced', getU32Encoder()],
    ['blockDataUpdatedAtSlot', getU64Encoder()],
    [
      'priorityFeeMerkleRootUploadAuthority',
      getMerkleRootUploadAuthorityEncoder(),
    ],
    ['padding1', fixEncoderSize(getBytesEncoder(), 47)],
  ]);
}

export function getValidatorHistoryEntryDecoder(): FixedSizeDecoder<ValidatorHistoryEntry> {
  return getStructDecoder([
    ['activatedStakeLamports', getU64Decoder()],
    ['epoch', getU16Decoder()],
    ['mevCommission', getU16Decoder()],
    ['epochCredits', getU32Decoder()],
    ['commission', getU8Decoder()],
    ['clientType', getU8Decoder()],
    ['version', getClientVersionDecoder()],
    ['ip', fixDecoderSize(getBytesDecoder(), 4)],
    ['merkleRootUploadAuthority', getMerkleRootUploadAuthorityDecoder()],
    ['isSuperminority', getU8Decoder()],
    ['rank', getU32Decoder()],
    ['voteAccountLastUpdateSlot', getU64Decoder()],
    ['mevEarned', getU32Decoder()],
    ['priorityFeeCommission', getU16Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 2)],
    ['priorityFeeTips', getU64Decoder()],
    ['totalPriorityFees', getU64Decoder()],
    ['totalLeaderSlots', getU32Decoder()],
    ['blocksProduced', getU32Decoder()],
    ['blockDataUpdatedAtSlot', getU64Decoder()],
    [
      'priorityFeeMerkleRootUploadAuthority',
      getMerkleRootUploadAuthorityDecoder(),
    ],
    ['padding1', fixDecoderSize(getBytesDecoder(), 47)],
  ]);
}

export function getValidatorHistoryEntryCodec(): FixedSizeCodec<
  ValidatorHistoryEntryArgs,
  ValidatorHistoryEntry
> {
  return combineCodec(
    getValidatorHistoryEntryEncoder(),
    getValidatorHistoryEntryDecoder()
  );
}
