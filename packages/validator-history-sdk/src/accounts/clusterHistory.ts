/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getCircBufClusterDecoder,
  getCircBufClusterEncoder,
  type CircBufCluster,
  type CircBufClusterArgs,
} from '../types';

export const CLUSTER_HISTORY_DISCRIMINATOR = new Uint8Array([
  41, 154, 241, 80, 135, 88, 85, 252,
]);

export function getClusterHistoryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLUSTER_HISTORY_DISCRIMINATOR
  );
}

export type ClusterHistory = {
  discriminator: ReadonlyUint8Array;
  structVersion: bigint;
  bump: number;
  padding0: ReadonlyUint8Array;
  clusterHistoryLastUpdateSlot: bigint;
  padding1: ReadonlyUint8Array;
  history: CircBufCluster;
};

export type ClusterHistoryArgs = {
  structVersion: number | bigint;
  bump: number;
  padding0: ReadonlyUint8Array;
  clusterHistoryLastUpdateSlot: number | bigint;
  padding1: ReadonlyUint8Array;
  history: CircBufClusterArgs;
};

export function getClusterHistoryEncoder(): FixedSizeEncoder<ClusterHistoryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['structVersion', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 7)],
      ['clusterHistoryLastUpdateSlot', getU64Encoder()],
      ['padding1', fixEncoderSize(getBytesEncoder(), 232)],
      ['history', getCircBufClusterEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CLUSTER_HISTORY_DISCRIMINATOR })
  );
}

export function getClusterHistoryDecoder(): FixedSizeDecoder<ClusterHistory> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['structVersion', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 7)],
    ['clusterHistoryLastUpdateSlot', getU64Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 232)],
    ['history', getCircBufClusterDecoder()],
  ]);
}

export function getClusterHistoryCodec(): FixedSizeCodec<
  ClusterHistoryArgs,
  ClusterHistory
> {
  return combineCodec(getClusterHistoryEncoder(), getClusterHistoryDecoder());
}

export function decodeClusterHistory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ClusterHistory, TAddress>;
export function decodeClusterHistory<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ClusterHistory, TAddress>;
export function decodeClusterHistory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ClusterHistory, TAddress> | MaybeAccount<ClusterHistory, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getClusterHistoryDecoder()
  );
}

export async function fetchClusterHistory<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ClusterHistory, TAddress>> {
  const maybeAccount = await fetchMaybeClusterHistory(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeClusterHistory<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ClusterHistory, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeClusterHistory(maybeAccount);
}

export async function fetchAllClusterHistory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ClusterHistory>[]> {
  const maybeAccounts = await fetchAllMaybeClusterHistory(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeClusterHistory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ClusterHistory>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeClusterHistory(maybeAccount)
  );
}

export function getClusterHistorySize(): number {
  return 131352;
}
