/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_NEW_ADMIN_DISCRIMINATOR = new Uint8Array([
  62, 156, 4, 148, 79, 162, 148, 252,
]);

export function getSetNewAdminDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_NEW_ADMIN_DISCRIMINATOR
  );
}

export type SetNewAdminInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountNewAdmin extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNewAdmin extends string
        ? ReadonlyAccount<TAccountNewAdmin>
        : TAccountNewAdmin,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetNewAdminInstructionData = { discriminator: ReadonlyUint8Array };

export type SetNewAdminInstructionDataArgs = {};

export function getSetNewAdminInstructionDataEncoder(): FixedSizeEncoder<SetNewAdminInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_NEW_ADMIN_DISCRIMINATOR })
  );
}

export function getSetNewAdminInstructionDataDecoder(): FixedSizeDecoder<SetNewAdminInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetNewAdminInstructionDataCodec(): FixedSizeCodec<
  SetNewAdminInstructionDataArgs,
  SetNewAdminInstructionData
> {
  return combineCodec(
    getSetNewAdminInstructionDataEncoder(),
    getSetNewAdminInstructionDataDecoder()
  );
}

export type SetNewAdminInput<
  TAccountConfig extends string = string,
  TAccountNewAdmin extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  newAdmin: Address<TAccountNewAdmin>;
  admin: TransactionSigner<TAccountAdmin>;
};

export function getSetNewAdminInstruction<
  TAccountConfig extends string,
  TAccountNewAdmin extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: SetNewAdminInput<TAccountConfig, TAccountNewAdmin, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): SetNewAdminInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNewAdmin,
  TAccountAdmin
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    newAdmin: { value: input.newAdmin ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.newAdmin),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getSetNewAdminInstructionDataEncoder().encode({}),
  } as SetNewAdminInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNewAdmin,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedSetNewAdminInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    newAdmin: TAccountMetas[1];
    admin: TAccountMetas[2];
  };
  data: SetNewAdminInstructionData;
};

export function parseSetNewAdminInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetNewAdminInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      newAdmin: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetNewAdminInstructionDataDecoder().decode(instruction.data),
  };
}
