/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_PRIORITY_FEE_HISTORY_DISCRIMINATOR = new Uint8Array([
  238, 213, 116, 176, 1, 211, 52, 214,
]);

export function getUpdatePriorityFeeHistoryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_PRIORITY_FEE_HISTORY_DISCRIMINATOR
  );
}

export type UpdatePriorityFeeHistoryInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountPriorityFeeOracleAuthority extends
    | string
    | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountValidatorHistoryAccount extends string
        ? WritableAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPriorityFeeOracleAuthority extends string
        ? ReadonlySignerAccount<TAccountPriorityFeeOracleAuthority> &
            AccountSignerMeta<TAccountPriorityFeeOracleAuthority>
        : TAccountPriorityFeeOracleAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdatePriorityFeeHistoryInstructionData = {
  discriminator: ReadonlyUint8Array;
  epoch: bigint;
  totalPriorityFees: bigint;
  totalLeaderSlots: number;
  blocksProduced: number;
  highestOracleRecordedSlot: bigint;
};

export type UpdatePriorityFeeHistoryInstructionDataArgs = {
  epoch: number | bigint;
  totalPriorityFees: number | bigint;
  totalLeaderSlots: number;
  blocksProduced: number;
  highestOracleRecordedSlot: number | bigint;
};

export function getUpdatePriorityFeeHistoryInstructionDataEncoder(): FixedSizeEncoder<UpdatePriorityFeeHistoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['totalPriorityFees', getU64Encoder()],
      ['totalLeaderSlots', getU32Encoder()],
      ['blocksProduced', getU32Encoder()],
      ['highestOracleRecordedSlot', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_PRIORITY_FEE_HISTORY_DISCRIMINATOR,
    })
  );
}

export function getUpdatePriorityFeeHistoryInstructionDataDecoder(): FixedSizeDecoder<UpdatePriorityFeeHistoryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['totalPriorityFees', getU64Decoder()],
    ['totalLeaderSlots', getU32Decoder()],
    ['blocksProduced', getU32Decoder()],
    ['highestOracleRecordedSlot', getU64Decoder()],
  ]);
}

export function getUpdatePriorityFeeHistoryInstructionDataCodec(): FixedSizeCodec<
  UpdatePriorityFeeHistoryInstructionDataArgs,
  UpdatePriorityFeeHistoryInstructionData
> {
  return combineCodec(
    getUpdatePriorityFeeHistoryInstructionDataEncoder(),
    getUpdatePriorityFeeHistoryInstructionDataDecoder()
  );
}

export type UpdatePriorityFeeHistoryInput<
  TAccountValidatorHistoryAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountConfig extends string = string,
  TAccountPriorityFeeOracleAuthority extends string = string,
> = {
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  config: Address<TAccountConfig>;
  priorityFeeOracleAuthority: TransactionSigner<TAccountPriorityFeeOracleAuthority>;
  epoch: UpdatePriorityFeeHistoryInstructionDataArgs['epoch'];
  totalPriorityFees: UpdatePriorityFeeHistoryInstructionDataArgs['totalPriorityFees'];
  totalLeaderSlots: UpdatePriorityFeeHistoryInstructionDataArgs['totalLeaderSlots'];
  blocksProduced: UpdatePriorityFeeHistoryInstructionDataArgs['blocksProduced'];
  highestOracleRecordedSlot: UpdatePriorityFeeHistoryInstructionDataArgs['highestOracleRecordedSlot'];
};

export function getUpdatePriorityFeeHistoryInstruction<
  TAccountValidatorHistoryAccount extends string,
  TAccountVoteAccount extends string,
  TAccountConfig extends string,
  TAccountPriorityFeeOracleAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: UpdatePriorityFeeHistoryInput<
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountPriorityFeeOracleAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdatePriorityFeeHistoryInstruction<
  TProgramAddress,
  TAccountValidatorHistoryAccount,
  TAccountVoteAccount,
  TAccountConfig,
  TAccountPriorityFeeOracleAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    priorityFeeOracleAuthority: {
      value: input.priorityFeeOracleAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.priorityFeeOracleAuthority),
    ],
    programAddress,
    data: getUpdatePriorityFeeHistoryInstructionDataEncoder().encode(
      args as UpdatePriorityFeeHistoryInstructionDataArgs
    ),
  } as UpdatePriorityFeeHistoryInstruction<
    TProgramAddress,
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountPriorityFeeOracleAuthority
  >;

  return instruction;
}

export type ParsedUpdatePriorityFeeHistoryInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    validatorHistoryAccount: TAccountMetas[0];
    voteAccount: TAccountMetas[1];
    config: TAccountMetas[2];
    priorityFeeOracleAuthority: TAccountMetas[3];
  };
  data: UpdatePriorityFeeHistoryInstructionData;
};

export function parseUpdatePriorityFeeHistoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdatePriorityFeeHistoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      validatorHistoryAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      config: getNextAccount(),
      priorityFeeOracleAuthority: getNextAccount(),
    },
    data: getUpdatePriorityFeeHistoryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
