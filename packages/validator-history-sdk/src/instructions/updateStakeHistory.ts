/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_STAKE_HISTORY_DISCRIMINATOR = new Uint8Array([
  213, 212, 103, 144, 8, 212, 173, 232,
]);

export function getUpdateStakeHistoryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_STAKE_HISTORY_DISCRIMINATOR
  );
}

export type UpdateStakeHistoryInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountOracleAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountValidatorHistoryAccount extends string
        ? WritableAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountOracleAuthority extends string
        ? WritableSignerAccount<TAccountOracleAuthority> &
            AccountSignerMeta<TAccountOracleAuthority>
        : TAccountOracleAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateStakeHistoryInstructionData = {
  discriminator: ReadonlyUint8Array;
  epoch: bigint;
  lamports: bigint;
  rank: number;
  isSuperminority: boolean;
};

export type UpdateStakeHistoryInstructionDataArgs = {
  epoch: number | bigint;
  lamports: number | bigint;
  rank: number;
  isSuperminority: boolean;
};

export function getUpdateStakeHistoryInstructionDataEncoder(): FixedSizeEncoder<UpdateStakeHistoryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['lamports', getU64Encoder()],
      ['rank', getU32Encoder()],
      ['isSuperminority', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_STAKE_HISTORY_DISCRIMINATOR })
  );
}

export function getUpdateStakeHistoryInstructionDataDecoder(): FixedSizeDecoder<UpdateStakeHistoryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['lamports', getU64Decoder()],
    ['rank', getU32Decoder()],
    ['isSuperminority', getBooleanDecoder()],
  ]);
}

export function getUpdateStakeHistoryInstructionDataCodec(): FixedSizeCodec<
  UpdateStakeHistoryInstructionDataArgs,
  UpdateStakeHistoryInstructionData
> {
  return combineCodec(
    getUpdateStakeHistoryInstructionDataEncoder(),
    getUpdateStakeHistoryInstructionDataDecoder()
  );
}

export type UpdateStakeHistoryInput<
  TAccountValidatorHistoryAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountConfig extends string = string,
  TAccountOracleAuthority extends string = string,
> = {
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  config: Address<TAccountConfig>;
  oracleAuthority: TransactionSigner<TAccountOracleAuthority>;
  epoch: UpdateStakeHistoryInstructionDataArgs['epoch'];
  lamports: UpdateStakeHistoryInstructionDataArgs['lamports'];
  rank: UpdateStakeHistoryInstructionDataArgs['rank'];
  isSuperminority: UpdateStakeHistoryInstructionDataArgs['isSuperminority'];
};

export function getUpdateStakeHistoryInstruction<
  TAccountValidatorHistoryAccount extends string,
  TAccountVoteAccount extends string,
  TAccountConfig extends string,
  TAccountOracleAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: UpdateStakeHistoryInput<
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountOracleAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateStakeHistoryInstruction<
  TProgramAddress,
  TAccountValidatorHistoryAccount,
  TAccountVoteAccount,
  TAccountConfig,
  TAccountOracleAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    oracleAuthority: { value: input.oracleAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.oracleAuthority),
    ],
    programAddress,
    data: getUpdateStakeHistoryInstructionDataEncoder().encode(
      args as UpdateStakeHistoryInstructionDataArgs
    ),
  } as UpdateStakeHistoryInstruction<
    TProgramAddress,
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountOracleAuthority
  >;

  return instruction;
}

export type ParsedUpdateStakeHistoryInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    validatorHistoryAccount: TAccountMetas[0];
    voteAccount: TAccountMetas[1];
    config: TAccountMetas[2];
    oracleAuthority: TAccountMetas[3];
  };
  data: UpdateStakeHistoryInstructionData;
};

export function parseUpdateStakeHistoryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateStakeHistoryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      validatorHistoryAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      config: getNextAccount(),
      oracleAuthority: getNextAccount(),
    },
    data: getUpdateStakeHistoryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
