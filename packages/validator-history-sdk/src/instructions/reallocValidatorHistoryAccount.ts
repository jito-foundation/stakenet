/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REALLOC_VALIDATOR_HISTORY_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  196, 17, 33, 140, 174, 130, 33, 12,
]);

export function getReallocValidatorHistoryAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REALLOC_VALIDATOR_HISTORY_ACCOUNT_DISCRIMINATOR
  );
}

export type ReallocValidatorHistoryAccountInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountSigner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountValidatorHistoryAccount extends string
        ? WritableAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type ReallocValidatorHistoryAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReallocValidatorHistoryAccountInstructionDataArgs = {};

export function getReallocValidatorHistoryAccountInstructionDataEncoder(): FixedSizeEncoder<ReallocValidatorHistoryAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REALLOC_VALIDATOR_HISTORY_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getReallocValidatorHistoryAccountInstructionDataDecoder(): FixedSizeDecoder<ReallocValidatorHistoryAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReallocValidatorHistoryAccountInstructionDataCodec(): FixedSizeCodec<
  ReallocValidatorHistoryAccountInstructionDataArgs,
  ReallocValidatorHistoryAccountInstructionData
> {
  return combineCodec(
    getReallocValidatorHistoryAccountInstructionDataEncoder(),
    getReallocValidatorHistoryAccountInstructionDataDecoder()
  );
}

export type ReallocValidatorHistoryAccountInput<
  TAccountValidatorHistoryAccount extends string = string,
  TAccountConfig extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSigner extends string = string,
> = {
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  config: Address<TAccountConfig>;
  /** Used to read validator commission. */
  voteAccount: Address<TAccountVoteAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  signer: TransactionSigner<TAccountSigner>;
};

export function getReallocValidatorHistoryAccountInstruction<
  TAccountValidatorHistoryAccount extends string,
  TAccountConfig extends string,
  TAccountVoteAccount extends string,
  TAccountSystemProgram extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: ReallocValidatorHistoryAccountInput<
    TAccountValidatorHistoryAccount,
    TAccountConfig,
    TAccountVoteAccount,
    TAccountSystemProgram,
    TAccountSigner
  >,
  config?: { programAddress?: TProgramAddress }
): ReallocValidatorHistoryAccountInstruction<
  TProgramAddress,
  TAccountValidatorHistoryAccount,
  TAccountConfig,
  TAccountVoteAccount,
  TAccountSystemProgram,
  TAccountSigner
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: true },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getReallocValidatorHistoryAccountInstructionDataEncoder().encode({}),
  } as ReallocValidatorHistoryAccountInstruction<
    TProgramAddress,
    TAccountValidatorHistoryAccount,
    TAccountConfig,
    TAccountVoteAccount,
    TAccountSystemProgram,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedReallocValidatorHistoryAccountInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    validatorHistoryAccount: TAccountMetas[0];
    config: TAccountMetas[1];
    /** Used to read validator commission. */
    voteAccount: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    signer: TAccountMetas[4];
  };
  data: ReallocValidatorHistoryAccountInstructionData;
};

export function parseReallocValidatorHistoryAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReallocValidatorHistoryAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      validatorHistoryAccount: getNextAccount(),
      config: getNextAccount(),
      voteAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getReallocValidatorHistoryAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
