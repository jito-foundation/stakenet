/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BACKFILL_TOTAL_BLOCKS_DISCRIMINATOR = new Uint8Array([
  223, 59, 120, 117, 34, 248, 117, 220,
]);

export function getBackfillTotalBlocksDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BACKFILL_TOTAL_BLOCKS_DISCRIMINATOR
  );
}

export type BackfillTotalBlocksInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountClusterHistoryAccount extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountOracleAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountClusterHistoryAccount extends string
        ? WritableAccount<TAccountClusterHistoryAccount>
        : TAccountClusterHistoryAccount,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountOracleAuthority extends string
        ? WritableSignerAccount<TAccountOracleAuthority> &
            AccountSignerMeta<TAccountOracleAuthority>
        : TAccountOracleAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type BackfillTotalBlocksInstructionData = {
  discriminator: ReadonlyUint8Array;
  epoch: bigint;
  blocksInEpoch: number;
};

export type BackfillTotalBlocksInstructionDataArgs = {
  epoch: number | bigint;
  blocksInEpoch: number;
};

export function getBackfillTotalBlocksInstructionDataEncoder(): FixedSizeEncoder<BackfillTotalBlocksInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
      ['blocksInEpoch', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BACKFILL_TOTAL_BLOCKS_DISCRIMINATOR,
    })
  );
}

export function getBackfillTotalBlocksInstructionDataDecoder(): FixedSizeDecoder<BackfillTotalBlocksInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
    ['blocksInEpoch', getU32Decoder()],
  ]);
}

export function getBackfillTotalBlocksInstructionDataCodec(): FixedSizeCodec<
  BackfillTotalBlocksInstructionDataArgs,
  BackfillTotalBlocksInstructionData
> {
  return combineCodec(
    getBackfillTotalBlocksInstructionDataEncoder(),
    getBackfillTotalBlocksInstructionDataDecoder()
  );
}

export type BackfillTotalBlocksInput<
  TAccountClusterHistoryAccount extends string = string,
  TAccountConfig extends string = string,
  TAccountOracleAuthority extends string = string,
> = {
  clusterHistoryAccount: Address<TAccountClusterHistoryAccount>;
  config: Address<TAccountConfig>;
  oracleAuthority: TransactionSigner<TAccountOracleAuthority>;
  epoch: BackfillTotalBlocksInstructionDataArgs['epoch'];
  blocksInEpoch: BackfillTotalBlocksInstructionDataArgs['blocksInEpoch'];
};

export function getBackfillTotalBlocksInstruction<
  TAccountClusterHistoryAccount extends string,
  TAccountConfig extends string,
  TAccountOracleAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: BackfillTotalBlocksInput<
    TAccountClusterHistoryAccount,
    TAccountConfig,
    TAccountOracleAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): BackfillTotalBlocksInstruction<
  TProgramAddress,
  TAccountClusterHistoryAccount,
  TAccountConfig,
  TAccountOracleAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    clusterHistoryAccount: {
      value: input.clusterHistoryAccount ?? null,
      isWritable: true,
    },
    config: { value: input.config ?? null, isWritable: false },
    oracleAuthority: { value: input.oracleAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.clusterHistoryAccount),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.oracleAuthority),
    ],
    programAddress,
    data: getBackfillTotalBlocksInstructionDataEncoder().encode(
      args as BackfillTotalBlocksInstructionDataArgs
    ),
  } as BackfillTotalBlocksInstruction<
    TProgramAddress,
    TAccountClusterHistoryAccount,
    TAccountConfig,
    TAccountOracleAuthority
  >;

  return instruction;
}

export type ParsedBackfillTotalBlocksInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    clusterHistoryAccount: TAccountMetas[0];
    config: TAccountMetas[1];
    oracleAuthority: TAccountMetas[2];
  };
  data: BackfillTotalBlocksInstructionData;
};

export function parseBackfillTotalBlocksInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBackfillTotalBlocksInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      clusterHistoryAccount: getNextAccount(),
      config: getNextAccount(),
      oracleAuthority: getNextAccount(),
    },
    data: getBackfillTotalBlocksInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
