/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COPY_TIP_DISTRIBUTION_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  208, 213, 185, 210, 103, 124, 128, 173,
]);

export function getCopyTipDistributionAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COPY_TIP_DISTRIBUTION_ACCOUNT_DISCRIMINATOR
  );
}

export type CopyTipDistributionAccountInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountTipDistributionAccount extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountValidatorHistoryAccount extends string
        ? WritableAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTipDistributionAccount extends string
        ? ReadonlyAccount<TAccountTipDistributionAccount>
        : TAccountTipDistributionAccount,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type CopyTipDistributionAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  epoch: bigint;
};

export type CopyTipDistributionAccountInstructionDataArgs = {
  epoch: number | bigint;
};

export function getCopyTipDistributionAccountInstructionDataEncoder(): FixedSizeEncoder<CopyTipDistributionAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: COPY_TIP_DISTRIBUTION_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCopyTipDistributionAccountInstructionDataDecoder(): FixedSizeDecoder<CopyTipDistributionAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['epoch', getU64Decoder()],
  ]);
}

export function getCopyTipDistributionAccountInstructionDataCodec(): FixedSizeCodec<
  CopyTipDistributionAccountInstructionDataArgs,
  CopyTipDistributionAccountInstructionData
> {
  return combineCodec(
    getCopyTipDistributionAccountInstructionDataEncoder(),
    getCopyTipDistributionAccountInstructionDataDecoder()
  );
}

export type CopyTipDistributionAccountInput<
  TAccountValidatorHistoryAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountConfig extends string = string,
  TAccountTipDistributionAccount extends string = string,
  TAccountSigner extends string = string,
> = {
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  /** Used to read validator commission. */
  voteAccount: Address<TAccountVoteAccount>;
  config: Address<TAccountConfig>;
  /** `owner = config.tip_distribution_program.key()` here is sufficient. */
  tipDistributionAccount: Address<TAccountTipDistributionAccount>;
  signer: TransactionSigner<TAccountSigner>;
  epoch: CopyTipDistributionAccountInstructionDataArgs['epoch'];
};

export function getCopyTipDistributionAccountInstruction<
  TAccountValidatorHistoryAccount extends string,
  TAccountVoteAccount extends string,
  TAccountConfig extends string,
  TAccountTipDistributionAccount extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: CopyTipDistributionAccountInput<
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountTipDistributionAccount,
    TAccountSigner
  >,
  config?: { programAddress?: TProgramAddress }
): CopyTipDistributionAccountInstruction<
  TProgramAddress,
  TAccountValidatorHistoryAccount,
  TAccountVoteAccount,
  TAccountConfig,
  TAccountTipDistributionAccount,
  TAccountSigner
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    tipDistributionAccount: {
      value: input.tipDistributionAccount ?? null,
      isWritable: false,
    },
    signer: { value: input.signer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tipDistributionAccount),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getCopyTipDistributionAccountInstructionDataEncoder().encode(
      args as CopyTipDistributionAccountInstructionDataArgs
    ),
  } as CopyTipDistributionAccountInstruction<
    TProgramAddress,
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountConfig,
    TAccountTipDistributionAccount,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedCopyTipDistributionAccountInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    validatorHistoryAccount: TAccountMetas[0];
    /** Used to read validator commission. */
    voteAccount: TAccountMetas[1];
    config: TAccountMetas[2];
    /** `owner = config.tip_distribution_program.key()` here is sufficient. */
    tipDistributionAccount: TAccountMetas[3];
    signer: TAccountMetas[4];
  };
  data: CopyTipDistributionAccountInstructionData;
};

export function parseCopyTipDistributionAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCopyTipDistributionAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      validatorHistoryAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      config: getNextAccount(),
      tipDistributionAccount: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getCopyTipDistributionAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
