/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COPY_GOSSIP_CONTACT_INFO_DISCRIMINATOR = new Uint8Array([
  246, 174, 228, 249, 28, 209, 69, 85,
]);

export function getCopyGossipContactInfoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COPY_GOSSIP_CONTACT_INFO_DISCRIMINATOR
  );
}

export type CopyGossipContactInfoInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountInstructions extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountOracleAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountValidatorHistoryAccount extends string
        ? WritableAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountInstructions extends string
        ? ReadonlyAccount<TAccountInstructions>
        : TAccountInstructions,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountOracleAuthority extends string
        ? WritableSignerAccount<TAccountOracleAuthority> &
            AccountSignerMeta<TAccountOracleAuthority>
        : TAccountOracleAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type CopyGossipContactInfoInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CopyGossipContactInfoInstructionDataArgs = {};

export function getCopyGossipContactInfoInstructionDataEncoder(): FixedSizeEncoder<CopyGossipContactInfoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: COPY_GOSSIP_CONTACT_INFO_DISCRIMINATOR,
    })
  );
}

export function getCopyGossipContactInfoInstructionDataDecoder(): FixedSizeDecoder<CopyGossipContactInfoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCopyGossipContactInfoInstructionDataCodec(): FixedSizeCodec<
  CopyGossipContactInfoInstructionDataArgs,
  CopyGossipContactInfoInstructionData
> {
  return combineCodec(
    getCopyGossipContactInfoInstructionDataEncoder(),
    getCopyGossipContactInfoInstructionDataDecoder()
  );
}

export type CopyGossipContactInfoInput<
  TAccountValidatorHistoryAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountInstructions extends string = string,
  TAccountConfig extends string = string,
  TAccountOracleAuthority extends string = string,
> = {
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  instructions: Address<TAccountInstructions>;
  config: Address<TAccountConfig>;
  oracleAuthority: TransactionSigner<TAccountOracleAuthority>;
};

export function getCopyGossipContactInfoInstruction<
  TAccountValidatorHistoryAccount extends string,
  TAccountVoteAccount extends string,
  TAccountInstructions extends string,
  TAccountConfig extends string,
  TAccountOracleAuthority extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: CopyGossipContactInfoInput<
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountInstructions,
    TAccountConfig,
    TAccountOracleAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): CopyGossipContactInfoInstruction<
  TProgramAddress,
  TAccountValidatorHistoryAccount,
  TAccountVoteAccount,
  TAccountInstructions,
  TAccountConfig,
  TAccountOracleAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    instructions: { value: input.instructions ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: false },
    oracleAuthority: { value: input.oracleAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.instructions),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.oracleAuthority),
    ],
    programAddress,
    data: getCopyGossipContactInfoInstructionDataEncoder().encode({}),
  } as CopyGossipContactInfoInstruction<
    TProgramAddress,
    TAccountValidatorHistoryAccount,
    TAccountVoteAccount,
    TAccountInstructions,
    TAccountConfig,
    TAccountOracleAuthority
  >;

  return instruction;
}

export type ParsedCopyGossipContactInfoInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    validatorHistoryAccount: TAccountMetas[0];
    voteAccount: TAccountMetas[1];
    instructions: TAccountMetas[2];
    config: TAccountMetas[3];
    oracleAuthority: TAccountMetas[4];
  };
  data: CopyGossipContactInfoInstructionData;
};

export function parseCopyGossipContactInfoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCopyGossipContactInfoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      validatorHistoryAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      instructions: getNextAccount(),
      config: getNextAccount(),
      oracleAuthority: getNextAccount(),
    },
    data: getCopyGossipContactInfoInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
