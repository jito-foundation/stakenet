/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_NEW_PRIORITY_FEE_ORACLE_AUTHORITY_DISCRIMINATOR =
  new Uint8Array([140, 74, 47, 78, 73, 165, 143, 92]);

export function getSetNewPriorityFeeOracleAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_NEW_PRIORITY_FEE_ORACLE_AUTHORITY_DISCRIMINATOR
  );
}

export type SetNewPriorityFeeOracleAuthorityInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountNewPriorityFeeOracleAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNewPriorityFeeOracleAuthority extends string
        ? ReadonlyAccount<TAccountNewPriorityFeeOracleAuthority>
        : TAccountNewPriorityFeeOracleAuthority,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetNewPriorityFeeOracleAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type SetNewPriorityFeeOracleAuthorityInstructionDataArgs = {};

export function getSetNewPriorityFeeOracleAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetNewPriorityFeeOracleAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: SET_NEW_PRIORITY_FEE_ORACLE_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getSetNewPriorityFeeOracleAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetNewPriorityFeeOracleAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetNewPriorityFeeOracleAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetNewPriorityFeeOracleAuthorityInstructionDataArgs,
  SetNewPriorityFeeOracleAuthorityInstructionData
> {
  return combineCodec(
    getSetNewPriorityFeeOracleAuthorityInstructionDataEncoder(),
    getSetNewPriorityFeeOracleAuthorityInstructionDataDecoder()
  );
}

export type SetNewPriorityFeeOracleAuthorityInput<
  TAccountConfig extends string = string,
  TAccountNewPriorityFeeOracleAuthority extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  newPriorityFeeOracleAuthority: Address<TAccountNewPriorityFeeOracleAuthority>;
  admin: TransactionSigner<TAccountAdmin>;
};

export function getSetNewPriorityFeeOracleAuthorityInstruction<
  TAccountConfig extends string,
  TAccountNewPriorityFeeOracleAuthority extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: SetNewPriorityFeeOracleAuthorityInput<
    TAccountConfig,
    TAccountNewPriorityFeeOracleAuthority,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): SetNewPriorityFeeOracleAuthorityInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNewPriorityFeeOracleAuthority,
  TAccountAdmin
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    newPriorityFeeOracleAuthority: {
      value: input.newPriorityFeeOracleAuthority ?? null,
      isWritable: false,
    },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.newPriorityFeeOracleAuthority),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getSetNewPriorityFeeOracleAuthorityInstructionDataEncoder().encode(
      {}
    ),
  } as SetNewPriorityFeeOracleAuthorityInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNewPriorityFeeOracleAuthority,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedSetNewPriorityFeeOracleAuthorityInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    newPriorityFeeOracleAuthority: TAccountMetas[1];
    admin: TAccountMetas[2];
  };
  data: SetNewPriorityFeeOracleAuthorityInstructionData;
};

export function parseSetNewPriorityFeeOracleAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetNewPriorityFeeOracleAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      newPriorityFeeOracleAuthority: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetNewPriorityFeeOracleAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
