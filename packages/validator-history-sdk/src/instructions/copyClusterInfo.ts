/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VALIDATOR_HISTORY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COPY_CLUSTER_INFO_DISCRIMINATOR = new Uint8Array([
  124, 126, 139, 134, 126, 230, 100, 37,
]);

export function getCopyClusterInfoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COPY_CLUSTER_INFO_DISCRIMINATOR
  );
}

export type CopyClusterInfoInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountClusterHistoryAccount extends string | AccountMeta<string> = string,
  TAccountSlotHistory extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountClusterHistoryAccount extends string
        ? WritableAccount<TAccountClusterHistoryAccount>
        : TAccountClusterHistoryAccount,
      TAccountSlotHistory extends string
        ? ReadonlyAccount<TAccountSlotHistory>
        : TAccountSlotHistory,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      ...TRemainingAccounts,
    ]
  >;

export type CopyClusterInfoInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CopyClusterInfoInstructionDataArgs = {};

export function getCopyClusterInfoInstructionDataEncoder(): FixedSizeEncoder<CopyClusterInfoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: COPY_CLUSTER_INFO_DISCRIMINATOR })
  );
}

export function getCopyClusterInfoInstructionDataDecoder(): FixedSizeDecoder<CopyClusterInfoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCopyClusterInfoInstructionDataCodec(): FixedSizeCodec<
  CopyClusterInfoInstructionDataArgs,
  CopyClusterInfoInstructionData
> {
  return combineCodec(
    getCopyClusterInfoInstructionDataEncoder(),
    getCopyClusterInfoInstructionDataDecoder()
  );
}

export type CopyClusterInfoInput<
  TAccountClusterHistoryAccount extends string = string,
  TAccountSlotHistory extends string = string,
  TAccountSigner extends string = string,
> = {
  clusterHistoryAccount: Address<TAccountClusterHistoryAccount>;
  slotHistory: Address<TAccountSlotHistory>;
  signer: TransactionSigner<TAccountSigner>;
};

export function getCopyClusterInfoInstruction<
  TAccountClusterHistoryAccount extends string,
  TAccountSlotHistory extends string,
  TAccountSigner extends string,
  TProgramAddress extends Address = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
>(
  input: CopyClusterInfoInput<
    TAccountClusterHistoryAccount,
    TAccountSlotHistory,
    TAccountSigner
  >,
  config?: { programAddress?: TProgramAddress }
): CopyClusterInfoInstruction<
  TProgramAddress,
  TAccountClusterHistoryAccount,
  TAccountSlotHistory,
  TAccountSigner
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VALIDATOR_HISTORY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    clusterHistoryAccount: {
      value: input.clusterHistoryAccount ?? null,
      isWritable: true,
    },
    slotHistory: { value: input.slotHistory ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.clusterHistoryAccount),
      getAccountMeta(accounts.slotHistory),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getCopyClusterInfoInstructionDataEncoder().encode({}),
  } as CopyClusterInfoInstruction<
    TProgramAddress,
    TAccountClusterHistoryAccount,
    TAccountSlotHistory,
    TAccountSigner
  >;

  return instruction;
}

export type ParsedCopyClusterInfoInstruction<
  TProgram extends string = typeof VALIDATOR_HISTORY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    clusterHistoryAccount: TAccountMetas[0];
    slotHistory: TAccountMetas[1];
    signer: TAccountMetas[2];
  };
  data: CopyClusterInfoInstructionData;
};

export function parseCopyClusterInfoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCopyClusterInfoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      clusterHistoryAccount: getNextAccount(),
      slotHistory: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getCopyClusterInfoInstructionDataDecoder().decode(instruction.data),
  };
}
