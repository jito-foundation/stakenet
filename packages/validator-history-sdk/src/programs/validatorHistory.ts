/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBackfillTotalBlocksInstruction,
  type ParsedCopyClusterInfoInstruction,
  type ParsedCopyGossipContactInfoInstruction,
  type ParsedCopyPriorityFeeDistributionInstruction,
  type ParsedCopyTipDistributionAccountInstruction,
  type ParsedCopyVoteAccountInstruction,
  type ParsedInitializeClusterHistoryAccountInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeValidatorHistoryAccountInstruction,
  type ParsedReallocClusterHistoryAccountInstruction,
  type ParsedReallocConfigAccountInstruction,
  type ParsedReallocValidatorHistoryAccountInstruction,
  type ParsedSetNewAdminInstruction,
  type ParsedSetNewOracleAuthorityInstruction,
  type ParsedSetNewPriorityFeeDistributionProgramInstruction,
  type ParsedSetNewPriorityFeeOracleAuthorityInstruction,
  type ParsedSetNewTipDistributionProgramInstruction,
  type ParsedUpdatePriorityFeeHistoryInstruction,
  type ParsedUpdateStakeHistoryInstruction,
} from '../instructions';

export const VALIDATOR_HISTORY_PROGRAM_ADDRESS =
  'HistoryJTGbKQD2mRgLZ3XhqHnN811Qpez8X9kCcGHoa' as Address<'HistoryJTGbKQD2mRgLZ3XhqHnN811Qpez8X9kCcGHoa'>;

export enum ValidatorHistoryAccount {
  ClusterHistory,
  Config,
  ValidatorHistory,
}

export function identifyValidatorHistoryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ValidatorHistoryAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 154, 241, 80, 135, 88, 85, 252])
      ),
      0
    )
  ) {
    return ValidatorHistoryAccount.ClusterHistory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return ValidatorHistoryAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 25, 8, 221, 253, 131, 2, 146])
      ),
      0
    )
  ) {
    return ValidatorHistoryAccount.ValidatorHistory;
  }
  throw new Error(
    'The provided account could not be identified as a validatorHistory account.'
  );
}

export enum ValidatorHistoryInstruction {
  BackfillTotalBlocks,
  CopyClusterInfo,
  CopyGossipContactInfo,
  CopyPriorityFeeDistribution,
  CopyTipDistributionAccount,
  CopyVoteAccount,
  InitializeClusterHistoryAccount,
  InitializeConfig,
  InitializeValidatorHistoryAccount,
  ReallocClusterHistoryAccount,
  ReallocConfigAccount,
  ReallocValidatorHistoryAccount,
  SetNewAdmin,
  SetNewOracleAuthority,
  SetNewPriorityFeeDistributionProgram,
  SetNewPriorityFeeOracleAuthority,
  SetNewTipDistributionProgram,
  UpdatePriorityFeeHistory,
  UpdateStakeHistory,
}

export function identifyValidatorHistoryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): ValidatorHistoryInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 59, 120, 117, 34, 248, 117, 220])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.BackfillTotalBlocks;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 126, 139, 134, 126, 230, 100, 37])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.CopyClusterInfo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 174, 228, 249, 28, 209, 69, 85])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.CopyGossipContactInfo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([152, 174, 178, 77, 92, 83, 93, 33])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.CopyPriorityFeeDistribution;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 213, 185, 210, 103, 124, 128, 173])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.CopyTipDistributionAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 204, 73, 59, 129, 63, 134, 61])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.CopyVoteAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 204, 21, 27, 253, 9, 10, 78])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.InitializeClusterHistoryAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([61, 152, 10, 77, 196, 242, 89, 36])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.InitializeValidatorHistoryAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 51, 161, 22, 107, 40, 129, 104])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.ReallocClusterHistoryAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 69, 118, 225, 163, 54, 79, 101])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.ReallocConfigAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 17, 33, 140, 174, 130, 33, 12])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.ReallocValidatorHistoryAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 156, 4, 148, 79, 162, 148, 252])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.SetNewAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 73, 21, 170, 82, 128, 144, 56])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.SetNewOracleAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 234, 129, 224, 128, 162, 61, 174])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.SetNewPriorityFeeDistributionProgram;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 74, 47, 78, 73, 165, 143, 92])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.SetNewPriorityFeeOracleAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([200, 69, 235, 182, 178, 62, 130, 217])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.SetNewTipDistributionProgram;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 213, 116, 176, 1, 211, 52, 214])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.UpdatePriorityFeeHistory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 212, 103, 144, 8, 212, 173, 232])
      ),
      0
    )
  ) {
    return ValidatorHistoryInstruction.UpdateStakeHistory;
  }
  throw new Error(
    'The provided instruction could not be identified as a validatorHistory instruction.'
  );
}

export type ParsedValidatorHistoryInstruction<
  TProgram extends string = 'HistoryJTGbKQD2mRgLZ3XhqHnN811Qpez8X9kCcGHoa',
> =
  | ({
      instructionType: ValidatorHistoryInstruction.BackfillTotalBlocks;
    } & ParsedBackfillTotalBlocksInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.CopyClusterInfo;
    } & ParsedCopyClusterInfoInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.CopyGossipContactInfo;
    } & ParsedCopyGossipContactInfoInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.CopyPriorityFeeDistribution;
    } & ParsedCopyPriorityFeeDistributionInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.CopyTipDistributionAccount;
    } & ParsedCopyTipDistributionAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.CopyVoteAccount;
    } & ParsedCopyVoteAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.InitializeClusterHistoryAccount;
    } & ParsedInitializeClusterHistoryAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.InitializeValidatorHistoryAccount;
    } & ParsedInitializeValidatorHistoryAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.ReallocClusterHistoryAccount;
    } & ParsedReallocClusterHistoryAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.ReallocConfigAccount;
    } & ParsedReallocConfigAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.ReallocValidatorHistoryAccount;
    } & ParsedReallocValidatorHistoryAccountInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.SetNewAdmin;
    } & ParsedSetNewAdminInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.SetNewOracleAuthority;
    } & ParsedSetNewOracleAuthorityInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.SetNewPriorityFeeDistributionProgram;
    } & ParsedSetNewPriorityFeeDistributionProgramInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.SetNewPriorityFeeOracleAuthority;
    } & ParsedSetNewPriorityFeeOracleAuthorityInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.SetNewTipDistributionProgram;
    } & ParsedSetNewTipDistributionProgramInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.UpdatePriorityFeeHistory;
    } & ParsedUpdatePriorityFeeHistoryInstruction<TProgram>)
  | ({
      instructionType: ValidatorHistoryInstruction.UpdateStakeHistory;
    } & ParsedUpdateStakeHistoryInstruction<TProgram>);
