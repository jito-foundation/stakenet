/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getCircBufDecoder,
  getCircBufEncoder,
  type CircBuf,
  type CircBufArgs,
} from '../types';

export const VALIDATOR_HISTORY_DISCRIMINATOR = new Uint8Array([
  205, 25, 8, 221, 253, 131, 2, 146,
]);

export function getValidatorHistoryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VALIDATOR_HISTORY_DISCRIMINATOR
  );
}

export type ValidatorHistory = {
  discriminator: ReadonlyUint8Array;
  structVersion: number;
  voteAccount: Address;
  index: number;
  bump: number;
  padding0: ReadonlyUint8Array;
  lastIpTimestamp: bigint;
  lastVersionTimestamp: bigint;
  padding1: ReadonlyUint8Array;
  history: CircBuf;
};

export type ValidatorHistoryArgs = {
  structVersion: number;
  voteAccount: Address;
  index: number;
  bump: number;
  padding0: ReadonlyUint8Array;
  lastIpTimestamp: number | bigint;
  lastVersionTimestamp: number | bigint;
  padding1: ReadonlyUint8Array;
  history: CircBufArgs;
};

export function getValidatorHistoryEncoder(): FixedSizeEncoder<ValidatorHistoryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['structVersion', getU32Encoder()],
      ['voteAccount', getAddressEncoder()],
      ['index', getU32Encoder()],
      ['bump', getU8Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 7)],
      ['lastIpTimestamp', getU64Encoder()],
      ['lastVersionTimestamp', getU64Encoder()],
      ['padding1', fixEncoderSize(getBytesEncoder(), 232)],
      ['history', getCircBufEncoder()],
    ]),
    (value) => ({ ...value, discriminator: VALIDATOR_HISTORY_DISCRIMINATOR })
  );
}

export function getValidatorHistoryDecoder(): FixedSizeDecoder<ValidatorHistory> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['structVersion', getU32Decoder()],
    ['voteAccount', getAddressDecoder()],
    ['index', getU32Decoder()],
    ['bump', getU8Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 7)],
    ['lastIpTimestamp', getU64Decoder()],
    ['lastVersionTimestamp', getU64Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 232)],
    ['history', getCircBufDecoder()],
  ]);
}

export function getValidatorHistoryCodec(): FixedSizeCodec<
  ValidatorHistoryArgs,
  ValidatorHistory
> {
  return combineCodec(
    getValidatorHistoryEncoder(),
    getValidatorHistoryDecoder()
  );
}

export function decodeValidatorHistory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ValidatorHistory, TAddress>;
export function decodeValidatorHistory<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ValidatorHistory, TAddress>;
export function decodeValidatorHistory<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ValidatorHistory, TAddress>
  | MaybeAccount<ValidatorHistory, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorHistoryDecoder()
  );
}

export async function fetchValidatorHistory<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ValidatorHistory, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorHistory(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorHistory<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ValidatorHistory, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorHistory(maybeAccount);
}

export async function fetchAllValidatorHistory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ValidatorHistory>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorHistory(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorHistory(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ValidatorHistory>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeValidatorHistory(maybeAccount)
  );
}

export function getValidatorHistorySize(): number {
  return 65856;
}
