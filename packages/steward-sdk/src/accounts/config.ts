/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLargeBitMaskDecoder,
  getLargeBitMaskEncoder,
  getParametersDecoder,
  getParametersEncoder,
  getU8BoolDecoder,
  getU8BoolEncoder,
  type LargeBitMask,
  type LargeBitMaskArgs,
  type Parameters,
  type ParametersArgs,
  type U8Bool,
  type U8BoolArgs,
} from '../types';

export const CONFIG_DISCRIMINATOR = new Uint8Array([
  155, 12, 170, 224, 30, 250, 204, 130,
]);

export function getConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIG_DISCRIMINATOR);
}

export type Config = {
  discriminator: ReadonlyUint8Array;
  /** SPL Stake Pool address that this program is managing */
  stakePool: Address;
  /** Validator List */
  validatorList: Address;
  /**
   * Admin
   * - Update the `parameters_authority`
   * - Update the `blacklist_authority`
   * - Can call SPL Passthrough functions
   * - Can pause/reset the state machine
   */
  admin: Address;
  /**
   * Parameters Authority
   * - Can update steward parameters
   */
  parametersAuthority: Address;
  /**
   * Blacklist Authority
   * - Can add to the blacklist
   * - Can remove from the blacklist
   */
  blacklistAuthority: Address;
  /**
   * Bitmask representing index of validators that are not allowed delegation
   * NOTE: This is indexed off of the validator history, NOT the validator list
   */
  validatorHistoryBlacklist: LargeBitMask;
  /** Parameters for scoring, delegation, and state machine */
  parameters: Parameters;
  /** Halts any state machine progress */
  paused: U8Bool;
  /**
   * Required so that the struct is 8-byte aligned
   * https://doc.rust-lang.org/reference/type-layout.html#reprc-structs
   */
  padding0: ReadonlyUint8Array;
  /** The authority that can update the priority fee configs */
  priorityFeeParametersAuthority: Address;
  /** Padding for future governance parameters */
  padding: ReadonlyUint8Array;
};

export type ConfigArgs = {
  /** SPL Stake Pool address that this program is managing */
  stakePool: Address;
  /** Validator List */
  validatorList: Address;
  /**
   * Admin
   * - Update the `parameters_authority`
   * - Update the `blacklist_authority`
   * - Can call SPL Passthrough functions
   * - Can pause/reset the state machine
   */
  admin: Address;
  /**
   * Parameters Authority
   * - Can update steward parameters
   */
  parametersAuthority: Address;
  /**
   * Blacklist Authority
   * - Can add to the blacklist
   * - Can remove from the blacklist
   */
  blacklistAuthority: Address;
  /**
   * Bitmask representing index of validators that are not allowed delegation
   * NOTE: This is indexed off of the validator history, NOT the validator list
   */
  validatorHistoryBlacklist: LargeBitMaskArgs;
  /** Parameters for scoring, delegation, and state machine */
  parameters: ParametersArgs;
  /** Halts any state machine progress */
  paused: U8BoolArgs;
  /**
   * Required so that the struct is 8-byte aligned
   * https://doc.rust-lang.org/reference/type-layout.html#reprc-structs
   */
  padding0: ReadonlyUint8Array;
  /** The authority that can update the priority fee configs */
  priorityFeeParametersAuthority: Address;
  /** Padding for future governance parameters */
  padding: ReadonlyUint8Array;
};

export function getConfigEncoder(): FixedSizeEncoder<ConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['validatorList', getAddressEncoder()],
      ['admin', getAddressEncoder()],
      ['parametersAuthority', getAddressEncoder()],
      ['blacklistAuthority', getAddressEncoder()],
      ['validatorHistoryBlacklist', getLargeBitMaskEncoder()],
      ['parameters', getParametersEncoder()],
      ['paused', getU8BoolEncoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 7)],
      ['priorityFeeParametersAuthority', getAddressEncoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 984)],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_DISCRIMINATOR })
  );
}

export function getConfigDecoder(): FixedSizeDecoder<Config> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['validatorList', getAddressDecoder()],
    ['admin', getAddressDecoder()],
    ['parametersAuthority', getAddressDecoder()],
    ['blacklistAuthority', getAddressDecoder()],
    ['validatorHistoryBlacklist', getLargeBitMaskDecoder()],
    ['parameters', getParametersDecoder()],
    ['paused', getU8BoolDecoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 7)],
    ['priorityFeeParametersAuthority', getAddressDecoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 984)],
  ]);
}

export function getConfigCodec(): FixedSizeCodec<ConfigArgs, Config> {
  return combineCodec(getConfigEncoder(), getConfigDecoder());
}

export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Config, TAddress> | MaybeAccount<Config, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigDecoder()
  );
}

export async function fetchConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Config, TAddress>> {
  const maybeAccount = await fetchMaybeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Config, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfig(maybeAccount);
}

export async function fetchAllConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Config>[]> {
  const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Config>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeConfig(maybeAccount));
}

export function getConfigSize(): number {
  return 4048;
}
