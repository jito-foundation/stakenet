/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getStewardStateDecoder,
  getStewardStateEncoder,
  getU8BoolDecoder,
  getU8BoolEncoder,
  type StewardState,
  type StewardStateArgs,
  type U8Bool,
  type U8BoolArgs,
} from '../types';

export const STEWARD_STATE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  55, 216, 46, 49, 148, 67, 228, 29,
]);

export function getStewardStateAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STEWARD_STATE_ACCOUNT_DISCRIMINATOR
  );
}

export type StewardStateAccount = {
  discriminator: ReadonlyUint8Array;
  state: StewardState;
  isInitialized: U8Bool;
  bump: number;
  padding: ReadonlyUint8Array;
};

export type StewardStateAccountArgs = {
  state: StewardStateArgs;
  isInitialized: U8BoolArgs;
  bump: number;
  padding: ReadonlyUint8Array;
};

export function getStewardStateAccountEncoder(): FixedSizeEncoder<StewardStateAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['state', getStewardStateEncoder()],
      ['isInitialized', getU8BoolEncoder()],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 6)],
    ]),
    (value) => ({
      ...value,
      discriminator: STEWARD_STATE_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getStewardStateAccountDecoder(): FixedSizeDecoder<StewardStateAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['state', getStewardStateDecoder()],
    ['isInitialized', getU8BoolDecoder()],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 6)],
  ]);
}

export function getStewardStateAccountCodec(): FixedSizeCodec<
  StewardStateAccountArgs,
  StewardStateAccount
> {
  return combineCodec(
    getStewardStateAccountEncoder(),
    getStewardStateAccountDecoder()
  );
}

export function decodeStewardStateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StewardStateAccount, TAddress>;
export function decodeStewardStateAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StewardStateAccount, TAddress>;
export function decodeStewardStateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<StewardStateAccount, TAddress>
  | MaybeAccount<StewardStateAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStewardStateAccountDecoder()
  );
}

export async function fetchStewardStateAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StewardStateAccount, TAddress>> {
  const maybeAccount = await fetchMaybeStewardStateAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStewardStateAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StewardStateAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStewardStateAccount(maybeAccount);
}

export async function fetchAllStewardStateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StewardStateAccount>[]> {
  const maybeAccounts = await fetchAllMaybeStewardStateAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStewardStateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StewardStateAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStewardStateAccount(maybeAccount)
  );
}

export function getStewardStateAccountSize(): number {
  return 182609;
}
