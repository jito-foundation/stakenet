/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddValidatorToPoolInstruction,
  type ParsedAddValidatorsToBlacklistInstruction,
  type ParsedAdminMarkForRemovalInstruction,
  type ParsedAutoAddValidatorToPoolInstruction,
  type ParsedAutoRemoveValidatorFromPoolInstruction,
  type ParsedCloseStewardAccountsInstruction,
  type ParsedComputeDelegationsInstruction,
  type ParsedComputeInstantUnstakeInstruction,
  type ParsedComputeScoreInstruction,
  type ParsedDecreaseAdditionalValidatorStakeInstruction,
  type ParsedDecreaseValidatorStakeInstruction,
  type ParsedEpochMaintenanceInstruction,
  type ParsedIdleInstruction,
  type ParsedIncreaseAdditionalValidatorStakeInstruction,
  type ParsedIncreaseValidatorStakeInstruction,
  type ParsedInitializeStewardInstruction,
  type ParsedInstantRemoveValidatorInstruction,
  type ParsedPauseStewardInstruction,
  type ParsedReallocStateInstruction,
  type ParsedRebalanceInstruction,
  type ParsedRemoveValidatorFromPoolInstruction,
  type ParsedRemoveValidatorsFromBlacklistInstruction,
  type ParsedResetStewardStateInstruction,
  type ParsedResetValidatorLamportBalancesInstruction,
  type ParsedResumeStewardInstruction,
  type ParsedSetNewAuthorityInstruction,
  type ParsedSetPreferredValidatorInstruction,
  type ParsedSetStakerInstruction,
  type ParsedUpdateParametersInstruction,
  type ParsedUpdatePriorityFeeParametersInstruction,
} from '../instructions';

export const STEWARD_PROGRAM_ADDRESS =
  'Stewardf95sJbmtcZsyagb2dg4Mo8eVQho8gpECvLx8' as Address<'Stewardf95sJbmtcZsyagb2dg4Mo8eVQho8gpECvLx8'>;

export enum StewardAccount {
  ClusterHistory,
  Config,
  StewardStateAccount,
  ValidatorHistory,
}

export function identifyStewardAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StewardAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 154, 241, 80, 135, 88, 85, 252])
      ),
      0
    )
  ) {
    return StewardAccount.ClusterHistory;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return StewardAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 216, 46, 49, 148, 67, 228, 29])
      ),
      0
    )
  ) {
    return StewardAccount.StewardStateAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 25, 8, 221, 253, 131, 2, 146])
      ),
      0
    )
  ) {
    return StewardAccount.ValidatorHistory;
  }
  throw new Error(
    'The provided account could not be identified as a steward account.'
  );
}

export enum StewardInstruction {
  AddValidatorToPool,
  AddValidatorsToBlacklist,
  AdminMarkForRemoval,
  AutoAddValidatorToPool,
  AutoRemoveValidatorFromPool,
  CloseStewardAccounts,
  ComputeDelegations,
  ComputeInstantUnstake,
  ComputeScore,
  DecreaseAdditionalValidatorStake,
  DecreaseValidatorStake,
  EpochMaintenance,
  Idle,
  IncreaseAdditionalValidatorStake,
  IncreaseValidatorStake,
  InitializeSteward,
  InstantRemoveValidator,
  PauseSteward,
  ReallocState,
  Rebalance,
  RemoveValidatorFromPool,
  RemoveValidatorsFromBlacklist,
  ResetStewardState,
  ResetValidatorLamportBalances,
  ResumeSteward,
  SetNewAuthority,
  SetPreferredValidator,
  SetStaker,
  UpdateParameters,
  UpdatePriorityFeeParameters,
}

export function identifyStewardInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StewardInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 6, 29, 25, 192, 211, 190, 187])
      ),
      0
    )
  ) {
    return StewardInstruction.AddValidatorToPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 81, 61, 86, 100, 92, 226, 86])
      ),
      0
    )
  ) {
    return StewardInstruction.AddValidatorsToBlacklist;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 225, 98, 245, 9, 15, 154, 63])
      ),
      0
    )
  ) {
    return StewardInstruction.AdminMarkForRemoval;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 226, 7, 8, 169, 239, 220, 69])
      ),
      0
    )
  ) {
    return StewardInstruction.AutoAddValidatorToPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 39, 73, 213, 52, 34, 181, 94])
      ),
      0
    )
  ) {
    return StewardInstruction.AutoRemoveValidatorFromPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 171, 212, 186, 90, 10, 181, 24])
      ),
      0
    )
  ) {
    return StewardInstruction.CloseStewardAccounts;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 138, 49, 247, 69, 32, 11, 175])
      ),
      0
    )
  ) {
    return StewardInstruction.ComputeDelegations;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 220, 51, 183, 2, 94, 253, 251])
      ),
      0
    )
  ) {
    return StewardInstruction.ComputeInstantUnstake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 101, 4, 93, 120, 62, 41, 20])
      ),
      0
    )
  ) {
    return StewardInstruction.ComputeScore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 22, 113, 73, 21, 229, 33, 83])
      ),
      0
    )
  ) {
    return StewardInstruction.DecreaseAdditionalValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 203, 107, 123, 71, 63, 35, 225])
      ),
      0
    )
  ) {
    return StewardInstruction.DecreaseValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 225, 211, 82, 219, 242, 58, 200])
      ),
      0
    )
  ) {
    return StewardInstruction.EpochMaintenance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([200, 79, 16, 41, 251, 91, 239, 83])
      ),
      0
    )
  ) {
    return StewardInstruction.Idle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 136, 94, 230, 32, 54, 167, 242])
      ),
      0
    )
  ) {
    return StewardInstruction.IncreaseAdditionalValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([5, 121, 50, 243, 14, 159, 97, 6])
      ),
      0
    )
  ) {
    return StewardInstruction.IncreaseValidatorStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 182, 16, 84, 217, 58, 220, 175])
      ),
      0
    )
  ) {
    return StewardInstruction.InitializeSteward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 127, 216, 135, 24, 63, 229, 242])
      ),
      0
    )
  ) {
    return StewardInstruction.InstantRemoveValidator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 85, 52, 67, 192, 238, 178, 102])
      ),
      0
    )
  ) {
    return StewardInstruction.PauseSteward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([67, 181, 233, 214, 215, 148, 245, 126])
      ),
      0
    )
  ) {
    return StewardInstruction.ReallocState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 158, 77, 9, 210, 52, 88, 62])
      ),
      0
    )
  ) {
    return StewardInstruction.Rebalance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 32, 213, 239, 221, 15, 181, 114])
      ),
      0
    )
  ) {
    return StewardInstruction.RemoveValidatorFromPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 114, 77, 164, 159, 209, 137, 137])
      ),
      0
    )
  ) {
    return StewardInstruction.RemoveValidatorsFromBlacklist;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 248, 158, 46, 200, 205, 234, 86])
      ),
      0
    )
  ) {
    return StewardInstruction.ResetStewardState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 111, 124, 69, 69, 29, 96, 181])
      ),
      0
    )
  ) {
    return StewardInstruction.ResetValidatorLamportBalances;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 71, 153, 183, 197, 197, 187, 3])
      ),
      0
    )
  ) {
    return StewardInstruction.ResumeSteward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 40, 220, 124, 122, 142, 142, 98])
      ),
      0
    )
  ) {
    return StewardInstruction.SetNewAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 42, 19, 98, 212, 97, 109, 13])
      ),
      0
    )
  ) {
    return StewardInstruction.SetPreferredValidator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 203, 114, 28, 80, 138, 17, 131])
      ),
      0
    )
  ) {
    return StewardInstruction.SetStaker;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 107, 24, 207, 101, 49, 213, 77])
      ),
      0
    )
  ) {
    return StewardInstruction.UpdateParameters;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([244, 245, 159, 167, 235, 54, 76, 1])
      ),
      0
    )
  ) {
    return StewardInstruction.UpdatePriorityFeeParameters;
  }
  throw new Error(
    'The provided instruction could not be identified as a steward instruction.'
  );
}

export type ParsedStewardInstruction<
  TProgram extends string = 'Stewardf95sJbmtcZsyagb2dg4Mo8eVQho8gpECvLx8',
> =
  | ({
      instructionType: StewardInstruction.AddValidatorToPool;
    } & ParsedAddValidatorToPoolInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.AddValidatorsToBlacklist;
    } & ParsedAddValidatorsToBlacklistInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.AdminMarkForRemoval;
    } & ParsedAdminMarkForRemovalInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.AutoAddValidatorToPool;
    } & ParsedAutoAddValidatorToPoolInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.AutoRemoveValidatorFromPool;
    } & ParsedAutoRemoveValidatorFromPoolInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.CloseStewardAccounts;
    } & ParsedCloseStewardAccountsInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ComputeDelegations;
    } & ParsedComputeDelegationsInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ComputeInstantUnstake;
    } & ParsedComputeInstantUnstakeInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ComputeScore;
    } & ParsedComputeScoreInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.DecreaseAdditionalValidatorStake;
    } & ParsedDecreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.DecreaseValidatorStake;
    } & ParsedDecreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.EpochMaintenance;
    } & ParsedEpochMaintenanceInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.Idle;
    } & ParsedIdleInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.IncreaseAdditionalValidatorStake;
    } & ParsedIncreaseAdditionalValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.IncreaseValidatorStake;
    } & ParsedIncreaseValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.InitializeSteward;
    } & ParsedInitializeStewardInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.InstantRemoveValidator;
    } & ParsedInstantRemoveValidatorInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.PauseSteward;
    } & ParsedPauseStewardInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ReallocState;
    } & ParsedReallocStateInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.Rebalance;
    } & ParsedRebalanceInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.RemoveValidatorFromPool;
    } & ParsedRemoveValidatorFromPoolInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.RemoveValidatorsFromBlacklist;
    } & ParsedRemoveValidatorsFromBlacklistInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ResetStewardState;
    } & ParsedResetStewardStateInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ResetValidatorLamportBalances;
    } & ParsedResetValidatorLamportBalancesInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.ResumeSteward;
    } & ParsedResumeStewardInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.SetNewAuthority;
    } & ParsedSetNewAuthorityInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.SetPreferredValidator;
    } & ParsedSetPreferredValidatorInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.SetStaker;
    } & ParsedSetStakerInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.UpdateParameters;
    } & ParsedUpdateParametersInstruction<TProgram>)
  | ({
      instructionType: StewardInstruction.UpdatePriorityFeeParameters;
    } & ParsedUpdatePriorityFeeParametersInstruction<TProgram>);
