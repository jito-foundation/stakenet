/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/**
 * Data structure used to efficiently pack a binary array, primarily used to store all validators.
 * Each validator has an index (its index in the spl_stake_pool::ValidatorList), corresponding to a bit in the bitmask.
 * When an operation is executed on a validator, the bit corresponding to that validator's index is set to 1.
 * When all bits are 1, the operation is complete.
 */

export type BitMask = { values: Array<bigint> };

export type BitMaskArgs = { values: Array<number | bigint> };

export function getBitMaskEncoder(): FixedSizeEncoder<BitMaskArgs> {
  return getStructEncoder([
    ['values', getArrayEncoder(getU64Encoder(), { size: 79 })],
  ]);
}

export function getBitMaskDecoder(): FixedSizeDecoder<BitMask> {
  return getStructDecoder([
    ['values', getArrayDecoder(getU64Decoder(), { size: 79 })],
  ]);
}

export function getBitMaskCodec(): FixedSizeCodec<BitMaskArgs, BitMask> {
  return combineCodec(getBitMaskEncoder(), getBitMaskDecoder());
}
