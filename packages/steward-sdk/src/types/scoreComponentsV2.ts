/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getF64Decoder,
  getF64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';
import {
  getScoreDetailsDecoder,
  getScoreDetailsEncoder,
  type ScoreDetails,
  type ScoreDetailsArgs,
} from '.';

export type ScoreComponentsV2 = {
  /** Product of all scoring components */
  score: number;
  /** vote_credits_ratio * (1 - commission) */
  yieldScore: number;
  /** If max mev commission in mev_commission_range epochs is less than threshold, score is 1.0, else 0 */
  mevCommissionScore: number;
  /** If validator is blacklisted, score is 0.0, else 1.0 */
  blacklistedScore: number;
  /** If validator is not in the superminority, score is 1.0, else 0.0 */
  superminorityScore: number;
  /** If delinquency is not > threshold in any epoch, score is 1.0, else 0.0 */
  delinquencyScore: number;
  /** If validator has a mev commission in the last 10 epochs, score is 1.0, else 0.0 */
  runningJitoScore: number;
  /** If max commission in commission_range epochs is less than commission_threshold, score is 1.0, else 0.0 */
  commissionScore: number;
  /** If max commission in all validator history epochs is less than historical_commission_threshold, score is 1.0, else 0.0 */
  historicalCommissionScore: number;
  /**
   * Average vote credits in last epoch_credits_range epochs / average blocks in last epoch_credits_range epochs
   * Excluding current epoch
   */
  voteCreditsRatio: number;
  voteAccount: Address;
  epoch: number;
  /** Details about why a given score was calculated */
  details: ScoreDetails;
};

export type ScoreComponentsV2Args = {
  /** Product of all scoring components */
  score: number;
  /** vote_credits_ratio * (1 - commission) */
  yieldScore: number;
  /** If max mev commission in mev_commission_range epochs is less than threshold, score is 1.0, else 0 */
  mevCommissionScore: number;
  /** If validator is blacklisted, score is 0.0, else 1.0 */
  blacklistedScore: number;
  /** If validator is not in the superminority, score is 1.0, else 0.0 */
  superminorityScore: number;
  /** If delinquency is not > threshold in any epoch, score is 1.0, else 0.0 */
  delinquencyScore: number;
  /** If validator has a mev commission in the last 10 epochs, score is 1.0, else 0.0 */
  runningJitoScore: number;
  /** If max commission in commission_range epochs is less than commission_threshold, score is 1.0, else 0.0 */
  commissionScore: number;
  /** If max commission in all validator history epochs is less than historical_commission_threshold, score is 1.0, else 0.0 */
  historicalCommissionScore: number;
  /**
   * Average vote credits in last epoch_credits_range epochs / average blocks in last epoch_credits_range epochs
   * Excluding current epoch
   */
  voteCreditsRatio: number;
  voteAccount: Address;
  epoch: number;
  /** Details about why a given score was calculated */
  details: ScoreDetailsArgs;
};

export function getScoreComponentsV2Encoder(): FixedSizeEncoder<ScoreComponentsV2Args> {
  return getStructEncoder([
    ['score', getF64Encoder()],
    ['yieldScore', getF64Encoder()],
    ['mevCommissionScore', getF64Encoder()],
    ['blacklistedScore', getF64Encoder()],
    ['superminorityScore', getF64Encoder()],
    ['delinquencyScore', getF64Encoder()],
    ['runningJitoScore', getF64Encoder()],
    ['commissionScore', getF64Encoder()],
    ['historicalCommissionScore', getF64Encoder()],
    ['voteCreditsRatio', getF64Encoder()],
    ['voteAccount', getAddressEncoder()],
    ['epoch', getU16Encoder()],
    ['details', getScoreDetailsEncoder()],
  ]);
}

export function getScoreComponentsV2Decoder(): FixedSizeDecoder<ScoreComponentsV2> {
  return getStructDecoder([
    ['score', getF64Decoder()],
    ['yieldScore', getF64Decoder()],
    ['mevCommissionScore', getF64Decoder()],
    ['blacklistedScore', getF64Decoder()],
    ['superminorityScore', getF64Decoder()],
    ['delinquencyScore', getF64Decoder()],
    ['runningJitoScore', getF64Decoder()],
    ['commissionScore', getF64Decoder()],
    ['historicalCommissionScore', getF64Decoder()],
    ['voteCreditsRatio', getF64Decoder()],
    ['voteAccount', getAddressDecoder()],
    ['epoch', getU16Decoder()],
    ['details', getScoreDetailsDecoder()],
  ]);
}

export function getScoreComponentsV2Codec(): FixedSizeCodec<
  ScoreComponentsV2Args,
  ScoreComponentsV2
> {
  return combineCodec(
    getScoreComponentsV2Encoder(),
    getScoreComponentsV2Decoder()
  );
}
