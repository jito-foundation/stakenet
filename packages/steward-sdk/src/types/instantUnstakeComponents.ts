/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/**
 * Deprecated: This struct is no longer emitted but is kept to allow parsing of old events.
 * Because the event discriminator is based on struct name, it's important to rename the struct if
 * fields are changed.
 */

export type InstantUnstakeComponents = {
  instantUnstake: boolean;
  delinquencyCheck: boolean;
  commissionCheck: boolean;
  mevCommissionCheck: boolean;
  isBlacklisted: boolean;
  voteAccount: Address;
  epoch: number;
};

export type InstantUnstakeComponentsArgs = InstantUnstakeComponents;

export function getInstantUnstakeComponentsEncoder(): FixedSizeEncoder<InstantUnstakeComponentsArgs> {
  return getStructEncoder([
    ['instantUnstake', getBooleanEncoder()],
    ['delinquencyCheck', getBooleanEncoder()],
    ['commissionCheck', getBooleanEncoder()],
    ['mevCommissionCheck', getBooleanEncoder()],
    ['isBlacklisted', getBooleanEncoder()],
    ['voteAccount', getAddressEncoder()],
    ['epoch', getU16Encoder()],
  ]);
}

export function getInstantUnstakeComponentsDecoder(): FixedSizeDecoder<InstantUnstakeComponents> {
  return getStructDecoder([
    ['instantUnstake', getBooleanDecoder()],
    ['delinquencyCheck', getBooleanDecoder()],
    ['commissionCheck', getBooleanDecoder()],
    ['mevCommissionCheck', getBooleanDecoder()],
    ['isBlacklisted', getBooleanDecoder()],
    ['voteAccount', getAddressDecoder()],
    ['epoch', getU16Decoder()],
  ]);
}

export function getInstantUnstakeComponentsCodec(): FixedSizeCodec<
  InstantUnstakeComponentsArgs,
  InstantUnstakeComponents
> {
  return combineCodec(
    getInstantUnstakeComponentsEncoder(),
    getInstantUnstakeComponentsDecoder()
  );
}
