/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getValidatorHistoryEntryDecoder,
  getValidatorHistoryEntryEncoder,
  type ValidatorHistoryEntry,
  type ValidatorHistoryEntryArgs,
} from '.';

export type CircBuf = {
  idx: bigint;
  isEmpty: number;
  padding: ReadonlyUint8Array;
  arr: Array<ValidatorHistoryEntry>;
};

export type CircBufArgs = {
  idx: number | bigint;
  isEmpty: number;
  padding: ReadonlyUint8Array;
  arr: Array<ValidatorHistoryEntryArgs>;
};

export function getCircBufEncoder(): FixedSizeEncoder<CircBufArgs> {
  return getStructEncoder([
    ['idx', getU64Encoder()],
    ['isEmpty', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 7)],
    ['arr', getArrayEncoder(getValidatorHistoryEntryEncoder(), { size: 512 })],
  ]);
}

export function getCircBufDecoder(): FixedSizeDecoder<CircBuf> {
  return getStructDecoder([
    ['idx', getU64Decoder()],
    ['isEmpty', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
    ['arr', getArrayDecoder(getValidatorHistoryEntryDecoder(), { size: 512 })],
  ]);
}

export function getCircBufCodec(): FixedSizeCodec<CircBufArgs, CircBuf> {
  return combineCodec(getCircBufEncoder(), getCircBufDecoder());
}
