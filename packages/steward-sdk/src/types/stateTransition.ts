/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';

export type StateTransition = {
  epoch: bigint;
  slot: bigint;
  previousState: string;
  newState: string;
};

export type StateTransitionArgs = {
  epoch: number | bigint;
  slot: number | bigint;
  previousState: string;
  newState: string;
};

export function getStateTransitionEncoder(): Encoder<StateTransitionArgs> {
  return getStructEncoder([
    ['epoch', getU64Encoder()],
    ['slot', getU64Encoder()],
    ['previousState', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['newState', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
  ]);
}

export function getStateTransitionDecoder(): Decoder<StateTransition> {
  return getStructDecoder([
    ['epoch', getU64Decoder()],
    ['slot', getU64Decoder()],
    ['previousState', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['newState', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getStateTransitionCodec(): Codec<
  StateTransitionArgs,
  StateTransition
> {
  return combineCodec(getStateTransitionEncoder(), getStateTransitionDecoder());
}
