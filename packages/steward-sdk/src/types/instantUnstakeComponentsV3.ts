/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';
import {
  getInstantUnstakeDetailsDecoder,
  getInstantUnstakeDetailsEncoder,
  type InstantUnstakeDetails,
  type InstantUnstakeDetailsArgs,
} from '.';

export type InstantUnstakeComponentsV3 = {
  /** Aggregate of all checks */
  instantUnstake: boolean;
  /** Checks if validator has missed > instant_unstake_delinquency_threshold_ratio of votes this epoch */
  delinquencyCheck: boolean;
  /** Checks if validator has increased commission > commission_threshold */
  commissionCheck: boolean;
  /** Checks if validator has increased MEV commission > mev_commission_bps_threshold */
  mevCommissionCheck: boolean;
  /** Checks if validator was added to blacklist */
  isBlacklisted: boolean;
  /** Checks if validator has an unacceptable merkle root upload authority */
  isBadMerkleRootUploadAuthority: boolean;
  /** Checks if validator has an unacceptable priority fee merkle root upload authority */
  isBadPriorityFeeMerkleRootUploadAuthority: boolean;
  voteAccount: Address;
  epoch: number;
  /** Details about why a given check was calculated */
  details: InstantUnstakeDetails;
};

export type InstantUnstakeComponentsV3Args = {
  /** Aggregate of all checks */
  instantUnstake: boolean;
  /** Checks if validator has missed > instant_unstake_delinquency_threshold_ratio of votes this epoch */
  delinquencyCheck: boolean;
  /** Checks if validator has increased commission > commission_threshold */
  commissionCheck: boolean;
  /** Checks if validator has increased MEV commission > mev_commission_bps_threshold */
  mevCommissionCheck: boolean;
  /** Checks if validator was added to blacklist */
  isBlacklisted: boolean;
  /** Checks if validator has an unacceptable merkle root upload authority */
  isBadMerkleRootUploadAuthority: boolean;
  /** Checks if validator has an unacceptable priority fee merkle root upload authority */
  isBadPriorityFeeMerkleRootUploadAuthority: boolean;
  voteAccount: Address;
  epoch: number;
  /** Details about why a given check was calculated */
  details: InstantUnstakeDetailsArgs;
};

export function getInstantUnstakeComponentsV3Encoder(): FixedSizeEncoder<InstantUnstakeComponentsV3Args> {
  return getStructEncoder([
    ['instantUnstake', getBooleanEncoder()],
    ['delinquencyCheck', getBooleanEncoder()],
    ['commissionCheck', getBooleanEncoder()],
    ['mevCommissionCheck', getBooleanEncoder()],
    ['isBlacklisted', getBooleanEncoder()],
    ['isBadMerkleRootUploadAuthority', getBooleanEncoder()],
    ['isBadPriorityFeeMerkleRootUploadAuthority', getBooleanEncoder()],
    ['voteAccount', getAddressEncoder()],
    ['epoch', getU16Encoder()],
    ['details', getInstantUnstakeDetailsEncoder()],
  ]);
}

export function getInstantUnstakeComponentsV3Decoder(): FixedSizeDecoder<InstantUnstakeComponentsV3> {
  return getStructDecoder([
    ['instantUnstake', getBooleanDecoder()],
    ['delinquencyCheck', getBooleanDecoder()],
    ['commissionCheck', getBooleanDecoder()],
    ['mevCommissionCheck', getBooleanDecoder()],
    ['isBlacklisted', getBooleanDecoder()],
    ['isBadMerkleRootUploadAuthority', getBooleanDecoder()],
    ['isBadPriorityFeeMerkleRootUploadAuthority', getBooleanDecoder()],
    ['voteAccount', getAddressDecoder()],
    ['epoch', getU16Decoder()],
    ['details', getInstantUnstakeDetailsDecoder()],
  ]);
}

export function getInstantUnstakeComponentsV3Codec(): FixedSizeCodec<
  InstantUnstakeComponentsV3Args,
  InstantUnstakeComponentsV3
> {
  return combineCodec(
    getInstantUnstakeComponentsV3Encoder(),
    getInstantUnstakeComponentsV3Decoder()
  );
}
