/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getClusterHistoryEntryDecoder,
  getClusterHistoryEntryEncoder,
  type ClusterHistoryEntry,
  type ClusterHistoryEntryArgs,
} from '.';

export type CircBufCluster = {
  idx: bigint;
  isEmpty: number;
  padding: ReadonlyUint8Array;
  arr: Array<ClusterHistoryEntry>;
};

export type CircBufClusterArgs = {
  idx: number | bigint;
  isEmpty: number;
  padding: ReadonlyUint8Array;
  arr: Array<ClusterHistoryEntryArgs>;
};

export function getCircBufClusterEncoder(): FixedSizeEncoder<CircBufClusterArgs> {
  return getStructEncoder([
    ['idx', getU64Encoder()],
    ['isEmpty', getU8Encoder()],
    ['padding', fixEncoderSize(getBytesEncoder(), 7)],
    ['arr', getArrayEncoder(getClusterHistoryEntryEncoder(), { size: 512 })],
  ]);
}

export function getCircBufClusterDecoder(): FixedSizeDecoder<CircBufCluster> {
  return getStructDecoder([
    ['idx', getU64Decoder()],
    ['isEmpty', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
    ['arr', getArrayDecoder(getClusterHistoryEntryDecoder(), { size: 512 })],
  ]);
}

export function getCircBufClusterCodec(): FixedSizeCodec<
  CircBufClusterArgs,
  CircBufCluster
> {
  return combineCodec(getCircBufClusterEncoder(), getCircBufClusterDecoder());
}
