/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_STAKER_DISCRIMINATOR = new Uint8Array([
  149, 203, 114, 28, 80, 138, 17, 131,
]);

export function getSetStakerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_STAKER_DISCRIMINATOR);
}

export type SetStakerInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountNewStaker extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountNewStaker extends string
        ? ReadonlyAccount<TAccountNewStaker>
        : TAccountNewStaker,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetStakerInstructionData = { discriminator: ReadonlyUint8Array };

export type SetStakerInstructionDataArgs = {};

export function getSetStakerInstructionDataEncoder(): FixedSizeEncoder<SetStakerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_STAKER_DISCRIMINATOR })
  );
}

export function getSetStakerInstructionDataDecoder(): FixedSizeDecoder<SetStakerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetStakerInstructionDataCodec(): FixedSizeCodec<
  SetStakerInstructionDataArgs,
  SetStakerInstructionData
> {
  return combineCodec(
    getSetStakerInstructionDataEncoder(),
    getSetStakerInstructionDataDecoder()
  );
}

export type SetStakerInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountNewStaker extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  newStaker: Address<TAccountNewStaker>;
  admin: TransactionSigner<TAccountAdmin>;
};

export function getSetStakerInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountNewStaker extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: SetStakerInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountNewStaker,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): SetStakerInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountNewStaker,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    newStaker: { value: input.newStaker ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.newStaker),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getSetStakerInstructionDataEncoder().encode({}),
  } as SetStakerInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountNewStaker,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedSetStakerInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    stakePoolProgram: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    newStaker: TAccountMetas[4];
    admin: TAccountMetas[5];
  };
  data: SetStakerInstructionData;
};

export function parseSetStakerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetStakerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      newStaker: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetStakerInstructionDataDecoder().decode(instruction.data),
  };
}
