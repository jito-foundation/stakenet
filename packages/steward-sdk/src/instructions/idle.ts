/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const IDLE_DISCRIMINATOR = new Uint8Array([
  200, 79, 16, 41, 251, 91, 239, 83,
]);

export function getIdleDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(IDLE_DISCRIMINATOR);
}

export type IdleInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountValidatorList extends string
        ? ReadonlyAccount<TAccountValidatorList>
        : TAccountValidatorList,
      ...TRemainingAccounts,
    ]
  >;

export type IdleInstructionData = { discriminator: ReadonlyUint8Array };

export type IdleInstructionDataArgs = {};

export function getIdleInstructionDataEncoder(): FixedSizeEncoder<IdleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: IDLE_DISCRIMINATOR })
  );
}

export function getIdleInstructionDataDecoder(): FixedSizeDecoder<IdleInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getIdleInstructionDataCodec(): FixedSizeCodec<
  IdleInstructionDataArgs,
  IdleInstructionData
> {
  return combineCodec(
    getIdleInstructionDataEncoder(),
    getIdleInstructionDataDecoder()
  );
}

export type IdleInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountValidatorList extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  validatorList: Address<TAccountValidatorList>;
};

export function getIdleInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountValidatorList extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: IdleInput<TAccountConfig, TAccountStateAccount, TAccountValidatorList>,
  config?: { programAddress?: TProgramAddress }
): IdleInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountValidatorList
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.validatorList),
    ],
    programAddress,
    data: getIdleInstructionDataEncoder().encode({}),
  } as IdleInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorList
  >;

  return instruction;
}

export type ParsedIdleInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    validatorList: TAccountMetas[2];
  };
  data: IdleInstructionData;
};

export function parseIdleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIdleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      validatorList: getNextAccount(),
    },
    data: getIdleInstructionDataDecoder().decode(instruction.data),
  };
}
