/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getAuthorityTypeDecoder,
  getAuthorityTypeEncoder,
  type AuthorityType,
  type AuthorityTypeArgs,
} from '../types';

export const SET_NEW_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  94, 40, 220, 124, 122, 142, 142, 98,
]);

export function getSetNewAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_NEW_AUTHORITY_DISCRIMINATOR
  );
}

export type SetNewAuthorityInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountNewAuthority extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNewAuthority extends string
        ? ReadonlyAccount<TAccountNewAuthority>
        : TAccountNewAuthority,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetNewAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  authorityType: AuthorityType;
};

export type SetNewAuthorityInstructionDataArgs = {
  authorityType: AuthorityTypeArgs;
};

export function getSetNewAuthorityInstructionDataEncoder(): Encoder<SetNewAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authorityType', getAuthorityTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_NEW_AUTHORITY_DISCRIMINATOR })
  );
}

export function getSetNewAuthorityInstructionDataDecoder(): Decoder<SetNewAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authorityType', getAuthorityTypeDecoder()],
  ]);
}

export function getSetNewAuthorityInstructionDataCodec(): Codec<
  SetNewAuthorityInstructionDataArgs,
  SetNewAuthorityInstructionData
> {
  return combineCodec(
    getSetNewAuthorityInstructionDataEncoder(),
    getSetNewAuthorityInstructionDataDecoder()
  );
}

export type SetNewAuthorityInput<
  TAccountConfig extends string = string,
  TAccountNewAuthority extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  newAuthority: Address<TAccountNewAuthority>;
  admin: TransactionSigner<TAccountAdmin>;
  authorityType: SetNewAuthorityInstructionDataArgs['authorityType'];
};

export function getSetNewAuthorityInstruction<
  TAccountConfig extends string,
  TAccountNewAuthority extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: SetNewAuthorityInput<
    TAccountConfig,
    TAccountNewAuthority,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): SetNewAuthorityInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNewAuthority,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.newAuthority),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getSetNewAuthorityInstructionDataEncoder().encode(
      args as SetNewAuthorityInstructionDataArgs
    ),
  } as SetNewAuthorityInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNewAuthority,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedSetNewAuthorityInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    newAuthority: TAccountMetas[1];
    admin: TAccountMetas[2];
  };
  data: SetNewAuthorityInstructionData;
};

export function parseSetNewAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetNewAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      newAuthority: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetNewAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
