/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESET_VALIDATOR_LAMPORT_BALANCES_DISCRIMINATOR = new Uint8Array([
  69, 111, 124, 69, 69, 29, 96, 181,
]);

export function getResetValidatorLamportBalancesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESET_VALIDATOR_LAMPORT_BALANCES_DISCRIMINATOR
  );
}

export type ResetValidatorLamportBalancesInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountStewardState extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStewardState extends string
        ? WritableAccount<TAccountStewardState>
        : TAccountStewardState,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type ResetValidatorLamportBalancesInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ResetValidatorLamportBalancesInstructionDataArgs = {};

export function getResetValidatorLamportBalancesInstructionDataEncoder(): FixedSizeEncoder<ResetValidatorLamportBalancesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: RESET_VALIDATOR_LAMPORT_BALANCES_DISCRIMINATOR,
    })
  );
}

export function getResetValidatorLamportBalancesInstructionDataDecoder(): FixedSizeDecoder<ResetValidatorLamportBalancesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResetValidatorLamportBalancesInstructionDataCodec(): FixedSizeCodec<
  ResetValidatorLamportBalancesInstructionDataArgs,
  ResetValidatorLamportBalancesInstructionData
> {
  return combineCodec(
    getResetValidatorLamportBalancesInstructionDataEncoder(),
    getResetValidatorLamportBalancesInstructionDataDecoder()
  );
}

export type ResetValidatorLamportBalancesInput<
  TAccountStewardState extends string = string,
  TAccountConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  stewardState: Address<TAccountStewardState>;
  config: Address<TAccountConfig>;
  authority: TransactionSigner<TAccountAuthority>;
};

export function getResetValidatorLamportBalancesInstruction<
  TAccountStewardState extends string,
  TAccountConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: ResetValidatorLamportBalancesInput<
    TAccountStewardState,
    TAccountConfig,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): ResetValidatorLamportBalancesInstruction<
  TProgramAddress,
  TAccountStewardState,
  TAccountConfig,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stewardState: { value: input.stewardState ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stewardState),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getResetValidatorLamportBalancesInstructionDataEncoder().encode({}),
  } as ResetValidatorLamportBalancesInstruction<
    TProgramAddress,
    TAccountStewardState,
    TAccountConfig,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedResetValidatorLamportBalancesInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stewardState: TAccountMetas[0];
    config: TAccountMetas[1];
    authority: TAccountMetas[2];
  };
  data: ResetValidatorLamportBalancesInstructionData;
};

export function parseResetValidatorLamportBalancesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResetValidatorLamportBalancesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stewardState: getNextAccount(),
      config: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getResetValidatorLamportBalancesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
