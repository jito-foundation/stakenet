/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PAUSE_STEWARD_DISCRIMINATOR = new Uint8Array([
  214, 85, 52, 67, 192, 238, 178, 102,
]);

export function getPauseStewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PAUSE_STEWARD_DISCRIMINATOR
  );
}

export type PauseStewardInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type PauseStewardInstructionData = { discriminator: ReadonlyUint8Array };

export type PauseStewardInstructionDataArgs = {};

export function getPauseStewardInstructionDataEncoder(): FixedSizeEncoder<PauseStewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: PAUSE_STEWARD_DISCRIMINATOR })
  );
}

export function getPauseStewardInstructionDataDecoder(): FixedSizeDecoder<PauseStewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPauseStewardInstructionDataCodec(): FixedSizeCodec<
  PauseStewardInstructionDataArgs,
  PauseStewardInstructionData
> {
  return combineCodec(
    getPauseStewardInstructionDataEncoder(),
    getPauseStewardInstructionDataDecoder()
  );
}

export type PauseStewardInput<
  TAccountConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  config: Address<TAccountConfig>;
  authority: TransactionSigner<TAccountAuthority>;
};

export function getPauseStewardInstruction<
  TAccountConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: PauseStewardInput<TAccountConfig, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): PauseStewardInstruction<TProgramAddress, TAccountConfig, TAccountAuthority> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getPauseStewardInstructionDataEncoder().encode({}),
  } as PauseStewardInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedPauseStewardInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: PauseStewardInstructionData;
};

export function parsePauseStewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPauseStewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getPauseStewardInstructionDataDecoder().decode(instruction.data),
  };
}
