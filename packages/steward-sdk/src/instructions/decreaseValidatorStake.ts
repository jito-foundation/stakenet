/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DECREASE_VALIDATOR_STAKE_DISCRIMINATOR = new Uint8Array([
  145, 203, 107, 123, 71, 63, 35, 225,
]);

export function getDecreaseValidatorStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DECREASE_VALIDATOR_STAKE_DISCRIMINATOR
  );
}

export type DecreaseValidatorStakeInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountValidatorHistory extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountReserveStake extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountClock extends string | AccountMeta<string> = string,
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountValidatorHistory extends string
        ? WritableAccount<TAccountValidatorHistory>
        : TAccountValidatorHistory,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type DecreaseValidatorStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  lamports: bigint;
  transientSeed: bigint;
};

export type DecreaseValidatorStakeInstructionDataArgs = {
  lamports: number | bigint;
  transientSeed: number | bigint;
};

export function getDecreaseValidatorStakeInstructionDataEncoder(): FixedSizeEncoder<DecreaseValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lamports', getU64Encoder()],
      ['transientSeed', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECREASE_VALIDATOR_STAKE_DISCRIMINATOR,
    })
  );
}

export function getDecreaseValidatorStakeInstructionDataDecoder(): FixedSizeDecoder<DecreaseValidatorStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lamports', getU64Decoder()],
    ['transientSeed', getU64Decoder()],
  ]);
}

export function getDecreaseValidatorStakeInstructionDataCodec(): FixedSizeCodec<
  DecreaseValidatorStakeInstructionDataArgs,
  DecreaseValidatorStakeInstructionData
> {
  return combineCodec(
    getDecreaseValidatorStakeInstructionDataEncoder(),
    getDecreaseValidatorStakeInstructionDataDecoder()
  );
}

export type DecreaseValidatorStakeInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountValidatorHistory extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountClock extends string = string,
  TAccountRent extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  validatorHistory: Address<TAccountValidatorHistory>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  stakeAccount: Address<TAccountStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  clock: Address<TAccountClock>;
  rent?: Address<TAccountRent>;
  stakeHistory: Address<TAccountStakeHistory>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  admin: TransactionSigner<TAccountAdmin>;
  lamports: DecreaseValidatorStakeInstructionDataArgs['lamports'];
  transientSeed: DecreaseValidatorStakeInstructionDataArgs['transientSeed'];
};

export function getDecreaseValidatorStakeInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountValidatorHistory extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountVoteAccount extends string,
  TAccountClock extends string,
  TAccountRent extends string,
  TAccountStakeHistory extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: DecreaseValidatorStakeInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountVoteAccount,
    TAccountClock,
    TAccountRent,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): DecreaseValidatorStakeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountValidatorHistory,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountVoteAccount,
  TAccountClock,
  TAccountRent,
  TAccountStakeHistory,
  TAccountSystemProgram,
  TAccountStakeProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    validatorHistory: {
      value: input.validatorHistory ?? null,
      isWritable: true,
    },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.validatorHistory),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getDecreaseValidatorStakeInstructionDataEncoder().encode(
      args as DecreaseValidatorStakeInstructionDataArgs
    ),
  } as DecreaseValidatorStakeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountVoteAccount,
    TAccountClock,
    TAccountRent,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedDecreaseValidatorStakeInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    validatorHistory: TAccountMetas[2];
    stakePoolProgram: TAccountMetas[3];
    stakePool: TAccountMetas[4];
    withdrawAuthority: TAccountMetas[5];
    validatorList: TAccountMetas[6];
    reserveStake: TAccountMetas[7];
    stakeAccount: TAccountMetas[8];
    transientStakeAccount: TAccountMetas[9];
    voteAccount: TAccountMetas[10];
    clock: TAccountMetas[11];
    rent: TAccountMetas[12];
    stakeHistory: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
    stakeProgram: TAccountMetas[15];
    admin: TAccountMetas[16];
  };
  data: DecreaseValidatorStakeInstructionData;
};

export function parseDecreaseValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDecreaseValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      validatorHistory: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      clock: getNextAccount(),
      rent: getNextAccount(),
      stakeHistory: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getDecreaseValidatorStakeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
