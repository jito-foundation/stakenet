/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COMPUTE_SCORE_DISCRIMINATOR = new Uint8Array([
  161, 101, 4, 93, 120, 62, 41, 20,
]);

export function getComputeScoreDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMPUTE_SCORE_DISCRIMINATOR
  );
}

export type ComputeScoreInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountValidatorHistory extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountClusterHistory extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountValidatorHistory extends string
        ? ReadonlyAccount<TAccountValidatorHistory>
        : TAccountValidatorHistory,
      TAccountValidatorList extends string
        ? ReadonlyAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountClusterHistory extends string
        ? ReadonlyAccount<TAccountClusterHistory>
        : TAccountClusterHistory,
      ...TRemainingAccounts,
    ]
  >;

export type ComputeScoreInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorListIndex: bigint;
};

export type ComputeScoreInstructionDataArgs = {
  validatorListIndex: number | bigint;
};

export function getComputeScoreInstructionDataEncoder(): FixedSizeEncoder<ComputeScoreInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorListIndex', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COMPUTE_SCORE_DISCRIMINATOR })
  );
}

export function getComputeScoreInstructionDataDecoder(): FixedSizeDecoder<ComputeScoreInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorListIndex', getU64Decoder()],
  ]);
}

export function getComputeScoreInstructionDataCodec(): FixedSizeCodec<
  ComputeScoreInstructionDataArgs,
  ComputeScoreInstructionData
> {
  return combineCodec(
    getComputeScoreInstructionDataEncoder(),
    getComputeScoreInstructionDataDecoder()
  );
}

export type ComputeScoreInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountValidatorHistory extends string = string,
  TAccountValidatorList extends string = string,
  TAccountClusterHistory extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  validatorHistory: Address<TAccountValidatorHistory>;
  validatorList: Address<TAccountValidatorList>;
  clusterHistory: Address<TAccountClusterHistory>;
  validatorListIndex: ComputeScoreInstructionDataArgs['validatorListIndex'];
};

export function getComputeScoreInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountValidatorHistory extends string,
  TAccountValidatorList extends string,
  TAccountClusterHistory extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: ComputeScoreInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountValidatorList,
    TAccountClusterHistory
  >,
  config?: { programAddress?: TProgramAddress }
): ComputeScoreInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountValidatorHistory,
  TAccountValidatorList,
  TAccountClusterHistory
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    validatorHistory: {
      value: input.validatorHistory ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: false },
    clusterHistory: { value: input.clusterHistory ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.validatorHistory),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.clusterHistory),
    ],
    programAddress,
    data: getComputeScoreInstructionDataEncoder().encode(
      args as ComputeScoreInstructionDataArgs
    ),
  } as ComputeScoreInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountValidatorList,
    TAccountClusterHistory
  >;

  return instruction;
}

export type ParsedComputeScoreInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    validatorHistory: TAccountMetas[2];
    validatorList: TAccountMetas[3];
    clusterHistory: TAccountMetas[4];
  };
  data: ComputeScoreInstructionData;
};

export function parseComputeScoreInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedComputeScoreInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      validatorHistory: getNextAccount(),
      validatorList: getNextAccount(),
      clusterHistory: getNextAccount(),
    },
    data: getComputeScoreInstructionDataDecoder().decode(instruction.data),
  };
}
