/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const AUTO_ADD_VALIDATOR_TO_POOL_DISCRIMINATOR = new Uint8Array([
  166, 226, 7, 8, 169, 239, 220, 69,
]);

export function getAutoAddValidatorToPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AUTO_ADD_VALIDATOR_TO_POOL_DISCRIMINATOR
  );
}

export type AutoAddValidatorToPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStewardState extends string | AccountMeta<string> = string,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountReserveStake extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountStakeConfig extends string | AccountMeta<string> = string,
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountClock extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStewardState extends string
        ? WritableAccount<TAccountStewardState>
        : TAccountStewardState,
      TAccountValidatorHistoryAccount extends string
        ? ReadonlyAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type AutoAddValidatorToPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type AutoAddValidatorToPoolInstructionDataArgs = {};

export function getAutoAddValidatorToPoolInstructionDataEncoder(): FixedSizeEncoder<AutoAddValidatorToPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: AUTO_ADD_VALIDATOR_TO_POOL_DISCRIMINATOR,
    })
  );
}

export function getAutoAddValidatorToPoolInstructionDataDecoder(): FixedSizeDecoder<AutoAddValidatorToPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAutoAddValidatorToPoolInstructionDataCodec(): FixedSizeCodec<
  AutoAddValidatorToPoolInstructionDataArgs,
  AutoAddValidatorToPoolInstructionData
> {
  return combineCodec(
    getAutoAddValidatorToPoolInstructionDataEncoder(),
    getAutoAddValidatorToPoolInstructionDataDecoder()
  );
}

export type AutoAddValidatorToPoolInput<
  TAccountConfig extends string = string,
  TAccountStewardState extends string = string,
  TAccountValidatorHistoryAccount extends string = string,
  TAccountStakePool extends string = string,
  TAccountReserveStake extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountClock extends string = string,
> = {
  config: Address<TAccountConfig>;
  stewardState: Address<TAccountStewardState>;
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  stakePool: Address<TAccountStakePool>;
  reserveStake: Address<TAccountReserveStake>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  stakeProgram: Address<TAccountStakeProgram>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  clock: Address<TAccountClock>;
};

export function getAutoAddValidatorToPoolInstruction<
  TAccountConfig extends string,
  TAccountStewardState extends string,
  TAccountValidatorHistoryAccount extends string,
  TAccountStakePool extends string,
  TAccountReserveStake extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountVoteAccount extends string,
  TAccountStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountStakeProgram extends string,
  TAccountStakePoolProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: AutoAddValidatorToPoolInput<
    TAccountConfig,
    TAccountStewardState,
    TAccountValidatorHistoryAccount,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountStakeProgram,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): AutoAddValidatorToPoolInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStewardState,
  TAccountValidatorHistoryAccount,
  TAccountStakePool,
  TAccountReserveStake,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountVoteAccount,
  TAccountStakeHistory,
  TAccountStakeConfig,
  TAccountStakeProgram,
  TAccountStakePoolProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountClock
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stewardState: { value: input.stewardState ?? null, isWritable: true },
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stewardState),
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getAutoAddValidatorToPoolInstructionDataEncoder().encode({}),
  } as AutoAddValidatorToPoolInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStewardState,
    TAccountValidatorHistoryAccount,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountStakeProgram,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountClock
  >;

  return instruction;
}

export type ParsedAutoAddValidatorToPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stewardState: TAccountMetas[1];
    validatorHistoryAccount: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    withdrawAuthority: TAccountMetas[5];
    validatorList: TAccountMetas[6];
    stakeAccount: TAccountMetas[7];
    voteAccount: TAccountMetas[8];
    stakeHistory: TAccountMetas[9];
    stakeConfig: TAccountMetas[10];
    stakeProgram: TAccountMetas[11];
    stakePoolProgram: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    rent: TAccountMetas[14];
    clock: TAccountMetas[15];
  };
  data: AutoAddValidatorToPoolInstructionData;
};

export function parseAutoAddValidatorToPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAutoAddValidatorToPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stewardState: getNextAccount(),
      validatorHistoryAccount: getNextAccount(),
      stakePool: getNextAccount(),
      reserveStake: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      stakeProgram: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getAutoAddValidatorToPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
