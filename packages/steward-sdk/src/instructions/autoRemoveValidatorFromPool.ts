/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const AUTO_REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR = new Uint8Array([
  65, 39, 73, 213, 52, 34, 181, 94,
]);

export function getAutoRemoveValidatorFromPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AUTO_REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR
  );
}

export type AutoRemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountValidatorHistoryAccount extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountReserveStake extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountStakeConfig extends string | AccountMeta<string> = string,
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountClock extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountValidatorHistoryAccount extends string
        ? ReadonlyAccount<TAccountValidatorHistoryAccount>
        : TAccountValidatorHistoryAccount,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type AutoRemoveValidatorFromPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorListIndex: bigint;
};

export type AutoRemoveValidatorFromPoolInstructionDataArgs = {
  validatorListIndex: number | bigint;
};

export function getAutoRemoveValidatorFromPoolInstructionDataEncoder(): FixedSizeEncoder<AutoRemoveValidatorFromPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorListIndex', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: AUTO_REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR,
    })
  );
}

export function getAutoRemoveValidatorFromPoolInstructionDataDecoder(): FixedSizeDecoder<AutoRemoveValidatorFromPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorListIndex', getU64Decoder()],
  ]);
}

export function getAutoRemoveValidatorFromPoolInstructionDataCodec(): FixedSizeCodec<
  AutoRemoveValidatorFromPoolInstructionDataArgs,
  AutoRemoveValidatorFromPoolInstructionData
> {
  return combineCodec(
    getAutoRemoveValidatorFromPoolInstructionDataEncoder(),
    getAutoRemoveValidatorFromPoolInstructionDataDecoder()
  );
}

export type AutoRemoveValidatorFromPoolInput<
  TAccountConfig extends string = string,
  TAccountValidatorHistoryAccount extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePool extends string = string,
  TAccountReserveStake extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountClock extends string = string,
> = {
  config: Address<TAccountConfig>;
  validatorHistoryAccount: Address<TAccountValidatorHistoryAccount>;
  stateAccount: Address<TAccountStateAccount>;
  stakePool: Address<TAccountStakePool>;
  reserveStake: Address<TAccountReserveStake>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  /** Account may not exist yet so no owner check done */
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  stakeProgram: Address<TAccountStakeProgram>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  clock: Address<TAccountClock>;
  validatorListIndex: AutoRemoveValidatorFromPoolInstructionDataArgs['validatorListIndex'];
};

export function getAutoRemoveValidatorFromPoolInstruction<
  TAccountConfig extends string,
  TAccountValidatorHistoryAccount extends string,
  TAccountStateAccount extends string,
  TAccountStakePool extends string,
  TAccountReserveStake extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountVoteAccount extends string,
  TAccountStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountStakeProgram extends string,
  TAccountStakePoolProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: AutoRemoveValidatorFromPoolInput<
    TAccountConfig,
    TAccountValidatorHistoryAccount,
    TAccountStateAccount,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountStakeProgram,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): AutoRemoveValidatorFromPoolInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountValidatorHistoryAccount,
  TAccountStateAccount,
  TAccountStakePool,
  TAccountReserveStake,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountVoteAccount,
  TAccountStakeHistory,
  TAccountStakeConfig,
  TAccountStakeProgram,
  TAccountStakePoolProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountClock
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    validatorHistoryAccount: {
      value: input.validatorHistoryAccount ?? null,
      isWritable: false,
    },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.validatorHistoryAccount),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getAutoRemoveValidatorFromPoolInstructionDataEncoder().encode(
      args as AutoRemoveValidatorFromPoolInstructionDataArgs
    ),
  } as AutoRemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountValidatorHistoryAccount,
    TAccountStateAccount,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountVoteAccount,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountStakeProgram,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountClock
  >;

  return instruction;
}

export type ParsedAutoRemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    validatorHistoryAccount: TAccountMetas[1];
    stateAccount: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    withdrawAuthority: TAccountMetas[5];
    validatorList: TAccountMetas[6];
    stakeAccount: TAccountMetas[7];
    /** Account may not exist yet so no owner check done */
    transientStakeAccount: TAccountMetas[8];
    voteAccount: TAccountMetas[9];
    stakeHistory: TAccountMetas[10];
    stakeConfig: TAccountMetas[11];
    stakeProgram: TAccountMetas[12];
    stakePoolProgram: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
    rent: TAccountMetas[15];
    clock: TAccountMetas[16];
  };
  data: AutoRemoveValidatorFromPoolInstructionData;
};

export function parseAutoRemoveValidatorFromPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAutoRemoveValidatorFromPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      validatorHistoryAccount: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePool: getNextAccount(),
      reserveStake: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      stakeProgram: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getAutoRemoveValidatorFromPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
