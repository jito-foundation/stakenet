/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getUpdateParametersArgsDecoder,
  getUpdateParametersArgsEncoder,
  getUpdatePriorityFeeParametersArgsDecoder,
  getUpdatePriorityFeeParametersArgsEncoder,
  type UpdateParametersArgs,
  type UpdateParametersArgsArgs,
  type UpdatePriorityFeeParametersArgs,
  type UpdatePriorityFeeParametersArgsArgs,
} from '../types';

export const INITIALIZE_STEWARD_DISCRIMINATOR = new Uint8Array([
  195, 182, 16, 84, 217, 58, 220, 175,
]);

export function getInitializeStewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_STEWARD_DISCRIMINATOR
  );
}

export type InitializeStewardInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountCurrentStaker extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableSignerAccount<TAccountConfig> &
            AccountSignerMeta<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountCurrentStaker extends string
        ? WritableSignerAccount<TAccountCurrentStaker> &
            AccountSignerMeta<TAccountCurrentStaker>
        : TAccountCurrentStaker,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeStewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  updateParametersArgs: UpdateParametersArgs;
  updatePriorityFeeParametersArgs: UpdatePriorityFeeParametersArgs;
};

export type InitializeStewardInstructionDataArgs = {
  updateParametersArgs: UpdateParametersArgsArgs;
  updatePriorityFeeParametersArgs: UpdatePriorityFeeParametersArgsArgs;
};

export function getInitializeStewardInstructionDataEncoder(): Encoder<InitializeStewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['updateParametersArgs', getUpdateParametersArgsEncoder()],
      [
        'updatePriorityFeeParametersArgs',
        getUpdatePriorityFeeParametersArgsEncoder(),
      ],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_STEWARD_DISCRIMINATOR })
  );
}

export function getInitializeStewardInstructionDataDecoder(): Decoder<InitializeStewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['updateParametersArgs', getUpdateParametersArgsDecoder()],
    [
      'updatePriorityFeeParametersArgs',
      getUpdatePriorityFeeParametersArgsDecoder(),
    ],
  ]);
}

export function getInitializeStewardInstructionDataCodec(): Codec<
  InitializeStewardInstructionDataArgs,
  InitializeStewardInstructionData
> {
  return combineCodec(
    getInitializeStewardInstructionDataEncoder(),
    getInitializeStewardInstructionDataDecoder()
  );
}

export type InitializeStewardInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountCurrentStaker extends string = string,
> = {
  config: TransactionSigner<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  stakePool: Address<TAccountStakePool>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  currentStaker: TransactionSigner<TAccountCurrentStaker>;
  updateParametersArgs: InitializeStewardInstructionDataArgs['updateParametersArgs'];
  updatePriorityFeeParametersArgs: InitializeStewardInstructionDataArgs['updatePriorityFeeParametersArgs'];
};

export function getInitializeStewardInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountStakePool extends string,
  TAccountStakePoolProgram extends string,
  TAccountSystemProgram extends string,
  TAccountCurrentStaker extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: InitializeStewardInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePool,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountCurrentStaker
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeStewardInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountStakePool,
  TAccountStakePoolProgram,
  TAccountSystemProgram,
  TAccountCurrentStaker
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    currentStaker: { value: input.currentStaker ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.currentStaker),
    ],
    programAddress,
    data: getInitializeStewardInstructionDataEncoder().encode(
      args as InitializeStewardInstructionDataArgs
    ),
  } as InitializeStewardInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePool,
    TAccountStakePoolProgram,
    TAccountSystemProgram,
    TAccountCurrentStaker
  >;

  return instruction;
}

export type ParsedInitializeStewardInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    stakePool: TAccountMetas[2];
    stakePoolProgram: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    currentStaker: TAccountMetas[5];
  };
  data: InitializeStewardInstructionData;
};

export function parseInitializeStewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeStewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePool: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      currentStaker: getNextAccount(),
    },
    data: getInitializeStewardInstructionDataDecoder().decode(instruction.data),
  };
}
