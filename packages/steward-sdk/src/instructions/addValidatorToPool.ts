/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_VALIDATOR_TO_POOL_DISCRIMINATOR = new Uint8Array([
  181, 6, 29, 25, 192, 211, 190, 187,
]);

export function getAddValidatorToPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_VALIDATOR_TO_POOL_DISCRIMINATOR
  );
}

export type AddValidatorToPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountReserveStake extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountClock extends string | AccountMeta<string> = string,
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountStakeConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountStakeConfig extends string
        ? ReadonlyAccount<TAccountStakeConfig>
        : TAccountStakeConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type AddValidatorToPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorSeed: Option<number>;
};

export type AddValidatorToPoolInstructionDataArgs = {
  validatorSeed: OptionOrNullable<number>;
};

export function getAddValidatorToPoolInstructionDataEncoder(): Encoder<AddValidatorToPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorSeed', getOptionEncoder(getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_VALIDATOR_TO_POOL_DISCRIMINATOR,
    })
  );
}

export function getAddValidatorToPoolInstructionDataDecoder(): Decoder<AddValidatorToPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorSeed', getOptionDecoder(getU32Decoder())],
  ]);
}

export function getAddValidatorToPoolInstructionDataCodec(): Codec<
  AddValidatorToPoolInstructionDataArgs,
  AddValidatorToPoolInstructionData
> {
  return combineCodec(
    getAddValidatorToPoolInstructionDataEncoder(),
    getAddValidatorToPoolInstructionDataDecoder()
  );
}

export type AddValidatorToPoolInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountReserveStake extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountRent extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountStakeConfig extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  reserveStake: Address<TAccountReserveStake>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  voteAccount: Address<TAccountVoteAccount>;
  rent?: Address<TAccountRent>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  stakeConfig: Address<TAccountStakeConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  admin: TransactionSigner<TAccountAdmin>;
  validatorSeed: AddValidatorToPoolInstructionDataArgs['validatorSeed'];
};

export function getAddValidatorToPoolInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountReserveStake extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountVoteAccount extends string,
  TAccountRent extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountStakeConfig extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: AddValidatorToPoolInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountVoteAccount,
    TAccountRent,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): AddValidatorToPoolInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountReserveStake,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountVoteAccount,
  TAccountRent,
  TAccountClock,
  TAccountStakeHistory,
  TAccountStakeConfig,
  TAccountSystemProgram,
  TAccountStakeProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    stakeConfig: { value: input.stakeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.stakeConfig),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getAddValidatorToPoolInstructionDataEncoder().encode(
      args as AddValidatorToPoolInstructionDataArgs
    ),
  } as AddValidatorToPoolInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountReserveStake,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountVoteAccount,
    TAccountRent,
    TAccountClock,
    TAccountStakeHistory,
    TAccountStakeConfig,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedAddValidatorToPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    stakePoolProgram: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    reserveStake: TAccountMetas[4];
    withdrawAuthority: TAccountMetas[5];
    validatorList: TAccountMetas[6];
    stakeAccount: TAccountMetas[7];
    voteAccount: TAccountMetas[8];
    rent: TAccountMetas[9];
    clock: TAccountMetas[10];
    stakeHistory: TAccountMetas[11];
    stakeConfig: TAccountMetas[12];
    systemProgram: TAccountMetas[13];
    stakeProgram: TAccountMetas[14];
    admin: TAccountMetas[15];
  };
  data: AddValidatorToPoolInstructionData;
};

export function parseAddValidatorToPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddValidatorToPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      reserveStake: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      voteAccount: getNextAccount(),
      rent: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      stakeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getAddValidatorToPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
