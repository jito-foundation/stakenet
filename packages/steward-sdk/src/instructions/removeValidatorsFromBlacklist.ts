/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_VALIDATORS_FROM_BLACKLIST_DISCRIMINATOR = new Uint8Array([
  233, 114, 77, 164, 159, 209, 137, 137,
]);

export function getRemoveValidatorsFromBlacklistDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_VALIDATORS_FROM_BLACKLIST_DISCRIMINATOR
  );
}

export type RemoveValidatorsFromBlacklistInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveValidatorsFromBlacklistInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorHistoryBlacklist: Array<number>;
};

export type RemoveValidatorsFromBlacklistInstructionDataArgs = {
  validatorHistoryBlacklist: Array<number>;
};

export function getRemoveValidatorsFromBlacklistInstructionDataEncoder(): Encoder<RemoveValidatorsFromBlacklistInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorHistoryBlacklist', getArrayEncoder(getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: REMOVE_VALIDATORS_FROM_BLACKLIST_DISCRIMINATOR,
    })
  );
}

export function getRemoveValidatorsFromBlacklistInstructionDataDecoder(): Decoder<RemoveValidatorsFromBlacklistInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorHistoryBlacklist', getArrayDecoder(getU32Decoder())],
  ]);
}

export function getRemoveValidatorsFromBlacklistInstructionDataCodec(): Codec<
  RemoveValidatorsFromBlacklistInstructionDataArgs,
  RemoveValidatorsFromBlacklistInstructionData
> {
  return combineCodec(
    getRemoveValidatorsFromBlacklistInstructionDataEncoder(),
    getRemoveValidatorsFromBlacklistInstructionDataDecoder()
  );
}

export type RemoveValidatorsFromBlacklistInput<
  TAccountConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  config: Address<TAccountConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  validatorHistoryBlacklist: RemoveValidatorsFromBlacklistInstructionDataArgs['validatorHistoryBlacklist'];
};

export function getRemoveValidatorsFromBlacklistInstruction<
  TAccountConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: RemoveValidatorsFromBlacklistInput<TAccountConfig, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): RemoveValidatorsFromBlacklistInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getRemoveValidatorsFromBlacklistInstructionDataEncoder().encode(
      args as RemoveValidatorsFromBlacklistInstructionDataArgs
    ),
  } as RemoveValidatorsFromBlacklistInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedRemoveValidatorsFromBlacklistInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: RemoveValidatorsFromBlacklistInstructionData;
};

export function parseRemoveValidatorsFromBlacklistInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRemoveValidatorsFromBlacklistInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getRemoveValidatorsFromBlacklistInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
