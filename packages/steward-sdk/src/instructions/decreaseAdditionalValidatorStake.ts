/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DECREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR = new Uint8Array(
  [90, 22, 113, 73, 21, 229, 33, 83]
);

export function getDecreaseAdditionalValidatorStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DECREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR
  );
}

export type DecreaseAdditionalValidatorStakeInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountValidatorHistory extends string | AccountMeta<string> = string,
  TAccountVoteAccount extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountReserveStake extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountEphemeralStakeAccount extends string | AccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | AccountMeta<string> = string,
  TAccountClock extends string | AccountMeta<string> = string,
  TAccountStakeHistory extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountValidatorHistory extends string
        ? WritableAccount<TAccountValidatorHistory>
        : TAccountValidatorHistory,
      TAccountVoteAccount extends string
        ? ReadonlyAccount<TAccountVoteAccount>
        : TAccountVoteAccount,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountReserveStake extends string
        ? WritableAccount<TAccountReserveStake>
        : TAccountReserveStake,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountEphemeralStakeAccount extends string
        ? WritableAccount<TAccountEphemeralStakeAccount>
        : TAccountEphemeralStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountStakeHistory extends string
        ? ReadonlyAccount<TAccountStakeHistory>
        : TAccountStakeHistory,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type DecreaseAdditionalValidatorStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  lamports: bigint;
  transientSeed: bigint;
  ephemeralSeed: bigint;
};

export type DecreaseAdditionalValidatorStakeInstructionDataArgs = {
  lamports: number | bigint;
  transientSeed: number | bigint;
  ephemeralSeed: number | bigint;
};

export function getDecreaseAdditionalValidatorStakeInstructionDataEncoder(): FixedSizeEncoder<DecreaseAdditionalValidatorStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lamports', getU64Encoder()],
      ['transientSeed', getU64Encoder()],
      ['ephemeralSeed', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECREASE_ADDITIONAL_VALIDATOR_STAKE_DISCRIMINATOR,
    })
  );
}

export function getDecreaseAdditionalValidatorStakeInstructionDataDecoder(): FixedSizeDecoder<DecreaseAdditionalValidatorStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lamports', getU64Decoder()],
    ['transientSeed', getU64Decoder()],
    ['ephemeralSeed', getU64Decoder()],
  ]);
}

export function getDecreaseAdditionalValidatorStakeInstructionDataCodec(): FixedSizeCodec<
  DecreaseAdditionalValidatorStakeInstructionDataArgs,
  DecreaseAdditionalValidatorStakeInstructionData
> {
  return combineCodec(
    getDecreaseAdditionalValidatorStakeInstructionDataEncoder(),
    getDecreaseAdditionalValidatorStakeInstructionDataDecoder()
  );
}

export type DecreaseAdditionalValidatorStakeInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountValidatorHistory extends string = string,
  TAccountVoteAccount extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountReserveStake extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountEphemeralStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClock extends string = string,
  TAccountStakeHistory extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  validatorHistory: Address<TAccountValidatorHistory>;
  voteAccount: Address<TAccountVoteAccount>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  reserveStake: Address<TAccountReserveStake>;
  stakeAccount: Address<TAccountStakeAccount>;
  ephemeralStakeAccount: Address<TAccountEphemeralStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  clock: Address<TAccountClock>;
  stakeHistory: Address<TAccountStakeHistory>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  admin: TransactionSigner<TAccountAdmin>;
  lamports: DecreaseAdditionalValidatorStakeInstructionDataArgs['lamports'];
  transientSeed: DecreaseAdditionalValidatorStakeInstructionDataArgs['transientSeed'];
  ephemeralSeed: DecreaseAdditionalValidatorStakeInstructionDataArgs['ephemeralSeed'];
};

export function getDecreaseAdditionalValidatorStakeInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountValidatorHistory extends string,
  TAccountVoteAccount extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountReserveStake extends string,
  TAccountStakeAccount extends string,
  TAccountEphemeralStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClock extends string,
  TAccountStakeHistory extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: DecreaseAdditionalValidatorStakeInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountVoteAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountStakeAccount,
    TAccountEphemeralStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): DecreaseAdditionalValidatorStakeInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountValidatorHistory,
  TAccountVoteAccount,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountReserveStake,
  TAccountStakeAccount,
  TAccountEphemeralStakeAccount,
  TAccountTransientStakeAccount,
  TAccountClock,
  TAccountStakeHistory,
  TAccountSystemProgram,
  TAccountStakeProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    validatorHistory: {
      value: input.validatorHistory ?? null,
      isWritable: true,
    },
    voteAccount: { value: input.voteAccount ?? null, isWritable: false },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    reserveStake: { value: input.reserveStake ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    ephemeralStakeAccount: {
      value: input.ephemeralStakeAccount ?? null,
      isWritable: true,
    },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clock: { value: input.clock ?? null, isWritable: false },
    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.validatorHistory),
      getAccountMeta(accounts.voteAccount),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.reserveStake),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.ephemeralStakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.stakeHistory),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getDecreaseAdditionalValidatorStakeInstructionDataEncoder().encode(
      args as DecreaseAdditionalValidatorStakeInstructionDataArgs
    ),
  } as DecreaseAdditionalValidatorStakeInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountValidatorHistory,
    TAccountVoteAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountReserveStake,
    TAccountStakeAccount,
    TAccountEphemeralStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountStakeHistory,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedDecreaseAdditionalValidatorStakeInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    validatorHistory: TAccountMetas[2];
    voteAccount: TAccountMetas[3];
    stakePoolProgram: TAccountMetas[4];
    stakePool: TAccountMetas[5];
    withdrawAuthority: TAccountMetas[6];
    validatorList: TAccountMetas[7];
    reserveStake: TAccountMetas[8];
    stakeAccount: TAccountMetas[9];
    ephemeralStakeAccount: TAccountMetas[10];
    transientStakeAccount: TAccountMetas[11];
    clock: TAccountMetas[12];
    stakeHistory: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
    stakeProgram: TAccountMetas[15];
    admin: TAccountMetas[16];
  };
  data: DecreaseAdditionalValidatorStakeInstructionData;
};

export function parseDecreaseAdditionalValidatorStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDecreaseAdditionalValidatorStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      validatorHistory: getNextAccount(),
      voteAccount: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      reserveStake: getNextAccount(),
      stakeAccount: getNextAccount(),
      ephemeralStakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      clock: getNextAccount(),
      stakeHistory: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getDecreaseAdditionalValidatorStakeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
