/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPreferredValidatorTypeDecoder,
  getPreferredValidatorTypeEncoder,
  type PreferredValidatorType,
  type PreferredValidatorTypeArgs,
} from '../types';

export const SET_PREFERRED_VALIDATOR_DISCRIMINATOR = new Uint8Array([
  114, 42, 19, 98, 212, 97, 109, 13,
]);

export function getSetPreferredValidatorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PREFERRED_VALIDATOR_DISCRIMINATOR
  );
}

export type SetPreferredValidatorInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountValidatorList extends string
        ? ReadonlyAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetPreferredValidatorInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorType: PreferredValidatorType;
  validator: Option<Address>;
};

export type SetPreferredValidatorInstructionDataArgs = {
  validatorType: PreferredValidatorTypeArgs;
  validator: OptionOrNullable<Address>;
};

export function getSetPreferredValidatorInstructionDataEncoder(): Encoder<SetPreferredValidatorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorType', getPreferredValidatorTypeEncoder()],
      ['validator', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PREFERRED_VALIDATOR_DISCRIMINATOR,
    })
  );
}

export function getSetPreferredValidatorInstructionDataDecoder(): Decoder<SetPreferredValidatorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorType', getPreferredValidatorTypeDecoder()],
    ['validator', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getSetPreferredValidatorInstructionDataCodec(): Codec<
  SetPreferredValidatorInstructionDataArgs,
  SetPreferredValidatorInstructionData
> {
  return combineCodec(
    getSetPreferredValidatorInstructionDataEncoder(),
    getSetPreferredValidatorInstructionDataDecoder()
  );
}

export type SetPreferredValidatorInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountValidatorList extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  validatorList: Address<TAccountValidatorList>;
  admin: TransactionSigner<TAccountAdmin>;
  validatorType: SetPreferredValidatorInstructionDataArgs['validatorType'];
  validator: SetPreferredValidatorInstructionDataArgs['validator'];
};

export function getSetPreferredValidatorInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountValidatorList extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: SetPreferredValidatorInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): SetPreferredValidatorInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountValidatorList,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    validatorList: { value: input.validatorList ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getSetPreferredValidatorInstructionDataEncoder().encode(
      args as SetPreferredValidatorInstructionDataArgs
    ),
  } as SetPreferredValidatorInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountValidatorList,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedSetPreferredValidatorInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    stakePoolProgram: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    validatorList: TAccountMetas[4];
    admin: TAccountMetas[5];
  };
  data: SetPreferredValidatorInstructionData;
};

export function parseSetPreferredValidatorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetPreferredValidatorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      validatorList: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetPreferredValidatorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
