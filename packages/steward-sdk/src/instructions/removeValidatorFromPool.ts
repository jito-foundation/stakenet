/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STEWARD_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR = new Uint8Array([
  161, 32, 213, 239, 221, 15, 181, 114,
]);

export function getRemoveValidatorFromPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR
  );
}

export type RemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStateAccount extends string | AccountMeta<string> = string,
  TAccountStakePoolProgram extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountWithdrawAuthority extends string | AccountMeta<string> = string,
  TAccountValidatorList extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountTransientStakeAccount extends string | AccountMeta<string> = string,
  TAccountClock extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeProgram extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStateAccount extends string
        ? WritableAccount<TAccountStateAccount>
        : TAccountStateAccount,
      TAccountStakePoolProgram extends string
        ? ReadonlyAccount<TAccountStakePoolProgram>
        : TAccountStakePoolProgram,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountWithdrawAuthority extends string
        ? ReadonlyAccount<TAccountWithdrawAuthority>
        : TAccountWithdrawAuthority,
      TAccountValidatorList extends string
        ? WritableAccount<TAccountValidatorList>
        : TAccountValidatorList,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountTransientStakeAccount extends string
        ? WritableAccount<TAccountTransientStakeAccount>
        : TAccountTransientStakeAccount,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeProgram extends string
        ? ReadonlyAccount<TAccountStakeProgram>
        : TAccountStakeProgram,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveValidatorFromPoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  validatorListIndex: bigint;
};

export type RemoveValidatorFromPoolInstructionDataArgs = {
  validatorListIndex: number | bigint;
};

export function getRemoveValidatorFromPoolInstructionDataEncoder(): FixedSizeEncoder<RemoveValidatorFromPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['validatorListIndex', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REMOVE_VALIDATOR_FROM_POOL_DISCRIMINATOR,
    })
  );
}

export function getRemoveValidatorFromPoolInstructionDataDecoder(): FixedSizeDecoder<RemoveValidatorFromPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['validatorListIndex', getU64Decoder()],
  ]);
}

export function getRemoveValidatorFromPoolInstructionDataCodec(): FixedSizeCodec<
  RemoveValidatorFromPoolInstructionDataArgs,
  RemoveValidatorFromPoolInstructionData
> {
  return combineCodec(
    getRemoveValidatorFromPoolInstructionDataEncoder(),
    getRemoveValidatorFromPoolInstructionDataDecoder()
  );
}

export type RemoveValidatorFromPoolInput<
  TAccountConfig extends string = string,
  TAccountStateAccount extends string = string,
  TAccountStakePoolProgram extends string = string,
  TAccountStakePool extends string = string,
  TAccountWithdrawAuthority extends string = string,
  TAccountValidatorList extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountTransientStakeAccount extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  stateAccount: Address<TAccountStateAccount>;
  stakePoolProgram: Address<TAccountStakePoolProgram>;
  stakePool: Address<TAccountStakePool>;
  withdrawAuthority: Address<TAccountWithdrawAuthority>;
  validatorList: Address<TAccountValidatorList>;
  stakeAccount: Address<TAccountStakeAccount>;
  transientStakeAccount: Address<TAccountTransientStakeAccount>;
  clock: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeProgram: Address<TAccountStakeProgram>;
  admin: TransactionSigner<TAccountAdmin>;
  validatorListIndex: RemoveValidatorFromPoolInstructionDataArgs['validatorListIndex'];
};

export function getRemoveValidatorFromPoolInstruction<
  TAccountConfig extends string,
  TAccountStateAccount extends string,
  TAccountStakePoolProgram extends string,
  TAccountStakePool extends string,
  TAccountWithdrawAuthority extends string,
  TAccountValidatorList extends string,
  TAccountStakeAccount extends string,
  TAccountTransientStakeAccount extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TAccountStakeProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof STEWARD_PROGRAM_ADDRESS,
>(
  input: RemoveValidatorFromPoolInput<
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveValidatorFromPoolInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountStateAccount,
  TAccountStakePoolProgram,
  TAccountStakePool,
  TAccountWithdrawAuthority,
  TAccountValidatorList,
  TAccountStakeAccount,
  TAccountTransientStakeAccount,
  TAccountClock,
  TAccountSystemProgram,
  TAccountStakeProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? STEWARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    stateAccount: { value: input.stateAccount ?? null, isWritable: true },
    stakePoolProgram: {
      value: input.stakePoolProgram ?? null,
      isWritable: false,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    withdrawAuthority: {
      value: input.withdrawAuthority ?? null,
      isWritable: false,
    },
    validatorList: { value: input.validatorList ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    transientStakeAccount: {
      value: input.transientStakeAccount ?? null,
      isWritable: true,
    },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeProgram: { value: input.stakeProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stateAccount),
      getAccountMeta(accounts.stakePoolProgram),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.withdrawAuthority),
      getAccountMeta(accounts.validatorList),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.transientStakeAccount),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getRemoveValidatorFromPoolInstructionDataEncoder().encode(
      args as RemoveValidatorFromPoolInstructionDataArgs
    ),
  } as RemoveValidatorFromPoolInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountStateAccount,
    TAccountStakePoolProgram,
    TAccountStakePool,
    TAccountWithdrawAuthority,
    TAccountValidatorList,
    TAccountStakeAccount,
    TAccountTransientStakeAccount,
    TAccountClock,
    TAccountSystemProgram,
    TAccountStakeProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedRemoveValidatorFromPoolInstruction<
  TProgram extends string = typeof STEWARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    stateAccount: TAccountMetas[1];
    stakePoolProgram: TAccountMetas[2];
    stakePool: TAccountMetas[3];
    withdrawAuthority: TAccountMetas[4];
    validatorList: TAccountMetas[5];
    stakeAccount: TAccountMetas[6];
    transientStakeAccount: TAccountMetas[7];
    clock: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    stakeProgram: TAccountMetas[10];
    admin: TAccountMetas[11];
  };
  data: RemoveValidatorFromPoolInstructionData;
};

export function parseRemoveValidatorFromPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRemoveValidatorFromPoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      stateAccount: getNextAccount(),
      stakePoolProgram: getNextAccount(),
      stakePool: getNextAccount(),
      withdrawAuthority: getNextAccount(),
      validatorList: getNextAccount(),
      stakeAccount: getNextAccount(),
      transientStakeAccount: getNextAccount(),
      clock: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getRemoveValidatorFromPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
